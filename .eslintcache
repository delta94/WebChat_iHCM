[{"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\CurrentUser.reducer.ts":"1","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts":"2","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx":"3","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx":"4","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx":"5","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotFoundIcon.ts":"6","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderUserChatListScreen.tsx":"7","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Main\\Views\\ChatDetailScreen.tsx":"8","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ImageOverlayFullScreen\\Views\\ImageOverlayScreen.tsx":"9","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconCirclePanel\\Views\\IconCirclePanelScreen.tsx":"10","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Main\\Views\\ConversationDetailScreen.tsx":"11","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomButton\\Views\\CustomButtonScreen.tsx":"12","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx":"13","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx":"14","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx":"15","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\App.tsx":"16","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx":"17","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts":"18","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Header\\Views\\HeaderNotificationListScreen.tsx":"19","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Main\\Views\\NotificationListScreen.tsx":"20","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"21","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Views\\NotificationScreen.tsx":"22","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx":"23","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfGroupNotiChat.ts":"24","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotification.ts":"25","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Models\\Notification.ts":"26","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx":"27","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\Main\\Views\\NavbarScreen.tsx":"28","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\Main\\Views\\NavDetailScreen.tsx":"29","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts":"30","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Detail\\Views\\PersonalDetailScreen.tsx":"31","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx":"32","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfMessage.ts":"33","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Main\\Views\\FriendListScreen.tsx":"34","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Friend\\Views\\FriendScreen.tsx":"35","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\LoadingSkeletons.tsx":"36","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\SkeletonNavbarDetailScreen.tsx":"37","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts":"38","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Conversion.database.ts":"39","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ResponseMess.reducer.ts":"40","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx":"41","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts":"42","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\IconPanel\\Views\\IconPanelScreen.tsx":"43","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx":"44","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Header\\Views\\HeaderScreen.tsx":"45","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx":"46","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx":"47","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx":"48","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Message.database.ts":"49","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx":"50","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx":"51","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\UploadImage\\Views\\UploadImageScreen.tsx":"52","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Functions\\BuildFileSelector.ts":"53","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\Main\\Views\\ChatInputScreen.tsx":"54","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfIconPanel.ts":"55","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx":"56","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\DatetimeChat\\Views\\DatetimeChatScreen.tsx":"57"},{"size":714,"mtime":1610072974204,"results":"58","hashOfConfig":"59"},{"size":258,"mtime":1610072974159,"results":"60","hashOfConfig":"59"},{"size":2051,"mtime":1610501418973,"results":"61","hashOfConfig":"59"},{"size":1326,"mtime":1610506185564,"results":"62","hashOfConfig":"59"},{"size":6967,"mtime":1610698237697,"results":"63","hashOfConfig":"59"},{"size":100,"mtime":1610502552056,"results":"64","hashOfConfig":"59"},{"size":812,"mtime":1610447581244,"results":"65","hashOfConfig":"59"},{"size":1852,"mtime":1610502776523,"results":"66","hashOfConfig":"59"},{"size":5554,"mtime":1610072974191,"results":"67","hashOfConfig":"59"},{"size":596,"mtime":1610072974188,"results":"68","hashOfConfig":"59"},{"size":754,"mtime":1610072974169,"results":"69","hashOfConfig":"59"},{"size":382,"mtime":1610072974186,"results":"70","hashOfConfig":"59"},{"size":1981,"mtime":1610362292754,"results":"71","hashOfConfig":"59"},{"size":17120,"mtime":1610503043235,"results":"72","hashOfConfig":"59"},{"size":335,"mtime":1610072974195,"results":"73","hashOfConfig":"59"},{"size":1728,"mtime":1610706263393,"results":"74","hashOfConfig":"59"},{"size":390,"mtime":1610072974189,"results":"75","hashOfConfig":"59"},{"size":229,"mtime":1610072974202,"results":"76","hashOfConfig":"59"},{"size":2752,"mtime":1610503907891,"results":"77","hashOfConfig":"59"},{"size":2476,"mtime":1610522782426,"results":"78","hashOfConfig":"59"},{"size":2888,"mtime":1610508769615,"results":"79","hashOfConfig":"59"},{"size":3479,"mtime":1610525533466,"results":"80","hashOfConfig":"59"},{"size":1181,"mtime":1610509137052,"results":"81","hashOfConfig":"59"},{"size":108,"mtime":1610511624029,"results":"82","hashOfConfig":"59"},{"size":99,"mtime":1610511995811,"results":"83","hashOfConfig":"59"},{"size":759,"mtime":1610522136110,"results":"84","hashOfConfig":"59"},{"size":281,"mtime":1610072974182,"results":"85","hashOfConfig":"59"},{"size":2663,"mtime":1610447925134,"results":"86","hashOfConfig":"59"},{"size":1109,"mtime":1610698315336,"results":"87","hashOfConfig":"59"},{"size":790,"mtime":1610072974206,"results":"88","hashOfConfig":"59"},{"size":9646,"mtime":1610072974176,"results":"89","hashOfConfig":"59"},{"size":8602,"mtime":1610707092247,"results":"90","hashOfConfig":"59"},{"size":92,"mtime":1610072974183,"results":"91","hashOfConfig":"59"},{"size":10698,"mtime":1610706650294,"results":"92","hashOfConfig":"59"},{"size":1700,"mtime":1610527458595,"results":"93","hashOfConfig":"59"},{"size":823,"mtime":1610706626247,"results":"94","hashOfConfig":"59"},{"size":1406,"mtime":1610598823183,"results":"95","hashOfConfig":"59"},{"size":53,"mtime":1610072974205,"results":"96","hashOfConfig":"59"},{"size":369,"mtime":1610072974206,"results":"97","hashOfConfig":"59"},{"size":884,"mtime":1610072974204,"results":"98","hashOfConfig":"59"},{"size":1002,"mtime":1610072974195,"results":"99","hashOfConfig":"59"},{"size":441,"mtime":1610094168719,"results":"100","hashOfConfig":"59"},{"size":880,"mtime":1610599937309,"results":"101","hashOfConfig":"59"},{"size":3063,"mtime":1610599962777,"results":"102","hashOfConfig":"59"},{"size":3343,"mtime":1610352280147,"results":"103","hashOfConfig":"59"},{"size":10654,"mtime":1610428595865,"results":"104","hashOfConfig":"59"},{"size":1733,"mtime":1610698026174,"results":"105","hashOfConfig":"59"},{"size":1797,"mtime":1610698216017,"results":"106","hashOfConfig":"59"},{"size":6338,"mtime":1610072974206,"results":"107","hashOfConfig":"59"},{"size":3361,"mtime":1610072974162,"results":"108","hashOfConfig":"59"},{"size":539,"mtime":1610072974160,"results":"109","hashOfConfig":"59"},{"size":628,"mtime":1610072974156,"results":"110","hashOfConfig":"59"},{"size":748,"mtime":1610072974196,"results":"111","hashOfConfig":"59"},{"size":5498,"mtime":1610074644605,"results":"112","hashOfConfig":"59"},{"size":106,"mtime":1610439959979,"results":"113","hashOfConfig":"59"},{"size":687,"mtime":1610072974159,"results":"114","hashOfConfig":"59"},{"size":274,"mtime":1610708515012,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1un77o0",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"146"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\CurrentUser.reducer.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx",["247"],"import React from 'react';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../Constants/KindOfMessage';\r\nimport IconImageScreen from '../../../IconImage/Views/IconImageScreen';\r\nimport ModalScreen from '../../../Modal/Views/ModalScreen';\r\nimport './DetailPopupScreen.css';\r\n\r\nfunction DetailPopupScreen(props : any){\r\n    const { listEles , eleHeader } = props;\r\n    const showDetailPopup = () =>{\r\n        return listEles.map((ele:any , index:number) =>{\r\n            if(ele.eleContext){\r\n\r\n                return  <ModalScreen headerContent={ \"Cài đặt thông báo\" } context={ ele.eleContext } hasPadding={ true }>\r\n                            <li onClick={ ele.onClick }>\r\n                                <IconImageScreen src={ ele.icon } alt=\"replay\" class={\"\"}></IconImageScreen>\r\n                                <span className=\"app-mainfont\">\r\n                                    { ele.text }\r\n                                </span>           \r\n                            </li>\r\n                        </ModalScreen>\r\n            }\r\n            return (\r\n                <li onClick={ ele.onClick }>\r\n                    <IconImageScreen src={ ele.icon } alt=\"replay\" class={\"\"}></IconImageScreen>\r\n                    <span className=\"app-mainfont\">\r\n                        { ele.text }\r\n                    </span>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"detailpopup-container\">\r\n            {\r\n                eleHeader && eleHeader\r\n            }\r\n            <ul className=\"detailpopup-detail\">\r\n                {\r\n                    showDetailPopup()\r\n                }\r\n            </ul>\r\n\r\n                  {/* <ModalScreen headerContent={ \"Cài đặt thông báo\" } context={ eleContext } hasPadding={ true }>\r\n            <div>\r\n              <IconPanelScreen isActive={false} srcImg={ iconwhitenoti } contextToolTip={\"Thông báo\"}></IconPanelScreen>\r\n            </div>\r\n          </ModalScreen> */}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DetailPopupScreen;",["248","249"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx",["250","251"],"import React, { useState , useEffect , useRef , ChangeEvent } from 'react';\r\nimport HeaderUserChatListScreen from '../../Header/Views/HeaderUserChatListScreen';\r\nimport UserChatScreen from '../../UserChat/Views/UserChatScreen';\r\nimport './UserChatListScreen.css';\r\nimport CustomInputScreen from '../../../../../libraries/Features/CustomInput/Views/CustomInputScreen';\r\nimport { connect } from 'react-redux';\r\nimport { getConversationList } from '../../../../../redux/Actions/ConversationList.action';\r\nimport { IConversationState } from '../../../../../redux/Reducers/ConversationList.reducer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ENUM_KIND_OF_CONVERSATION } from '../../../../../libraries/Constants/KindOfConversation';\r\nimport DataNotFoundScreen from '../../../../../libraries/Features/DataNotFound/Views/DataNotFoundScreen';\r\nimport { ENUM_KIND_OF_NOTFOUNDICON } from '../../../../../libraries/Constants/KindOfNotFoundIcon';\r\n\r\nconst iconsearch = require(\"../../../../../libraries/Icons/iconsearch.svg\").default;\r\n\r\nconst styleCustomInput = {\r\n  backgroundImage: `url('${iconsearch}')`,\r\n  backgroundPosition: \"3% 50%\",\r\n  padding: \"12px 20px 12px 40px\",\r\n  borderRadius: \"0.7rem\",\r\n  fontSize: \"1rem\",\r\n};\r\n\r\nconst conversationList: IConversationState[] = [\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: false,\r\n    id: 1,\r\n    isActive: false,\r\n    isGroup: false,\r\n    isOnline: true,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Trung Đức\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: false,\r\n    id: 2,\r\n    isActive: false,\r\n    isGroup: true,\r\n    isOnline: false,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Hội người yêu chim\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: true,\r\n    id: 3,\r\n    isActive: false,\r\n    isGroup: true,\r\n    isOnline: true,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Hội người yêu chim\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: true,\r\n    id: 4,\r\n    isActive: false,\r\n    isGroup: false,\r\n    isOnline: true,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Trung Đức\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n];\r\n\r\n\r\nfunction UserChatListScreen(props: any) {\r\n  const typingTimeoutRef = useRef<any>(null);\r\n  const [query , setQuery] = useState<string>(\"\");\r\n  const [activedUserChat , setActivedUserChat] = useState({\r\n    isGroup:false,\r\n    id: -1\r\n  });\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const id = 3;\r\n    props.getConversationList(id);\r\n\r\n    setUserChatIsAcTiveByPath();\r\n  },[])\r\n  \r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) =>{\r\n    if(typingTimeoutRef.current){\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n\r\n    typingTimeoutRef.current = setTimeout(() =>{\r\n      setQuery(e.target.value);\r\n    },5e2);\r\n  }\r\n\r\n  const setUserChatIsAcTiveByPath = () =>{\r\n    const currentPathName = history.location.pathname;\r\n    const arrPath = currentPathName.split(\"/\");\r\n    if(arrPath){\r\n      let isGroup = false;\r\n      let id = parseInt(arrPath[2]);\r\n      if(arrPath[1] === ENUM_KIND_OF_CONVERSATION.GROUP){\r\n        isGroup = true;\r\n      }else if(arrPath[1] === ENUM_KIND_OF_CONVERSATION.PERSONAL){\r\n        isGroup = false;\r\n      }else{\r\n        return;\r\n      }\r\n      if(arrPath.length === 4 && arrPath[2] === \"detail\"){\r\n        id = parseInt(arrPath[3]);\r\n      }\r\n      setUserChatIsAcTive(isGroup , id);\r\n    }\r\n  }\r\n\r\n  const setUserChatIsAcTive = (isGroup:boolean , id:number) =>{\r\n    setActivedUserChat({\r\n      isGroup,\r\n      id,\r\n    });\r\n  };\r\n\r\n  const ShowConversationList = () => {\r\n    if (conversationList.length === 0) {\r\n      return <DataNotFoundScreen text={\"Không tìm thấy kết quả\"} icon={ ENUM_KIND_OF_NOTFOUNDICON.DATA } isPosition={ true }></DataNotFoundScreen>;\r\n    }\r\n    return conversationList.map(\r\n      (conversationState: IConversationState, idx: number) => (\r\n        <UserChatScreen\r\n          key={idx}\r\n          id={conversationState.id}\r\n          hasReadLastMess={conversationState.hasReadLastMess}\r\n          isGroup={conversationState.isGroup}\r\n          isOnline={conversationState.isGroup}\r\n          name={conversationState.name}\r\n          lastMess={conversationState.lastMess}\r\n          timeToReadLastMess={conversationState.timeToReadLastMess}\r\n          avatar={conversationState.avatar}\r\n          isActive={\r\n            conversationState.isGroup === activedUserChat.isGroup &&\r\n            conversationState.id === activedUserChat.id\r\n          }\r\n          setIsActive={setUserChatIsAcTive}\r\n        ></UserChatScreen>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"userchatlist-top\">\r\n        <HeaderUserChatListScreen></HeaderUserChatListScreen>\r\n        <CustomInputScreen\r\n          style={styleCustomInput}\r\n          class=\"searchinput-container step1\"\r\n          placeHolder=\"Tìm kiếm cuộc trò chuyện\"\r\n          isMultiline={false}\r\n          isTextArea={ true }\r\n          onChange={ onChange }\r\n          onClick={ () => props.setGuidedTourIsRunning(false) }\r\n          hasClearText={ true }\r\n        ></CustomInputScreen>\r\n      </div>\r\n      <div className=\"userchatlist-bottom\">\r\n        {\r\n          ShowConversationList()\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    conversationList: state.conversationList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getConversationList: (id: number) => dispatch(getConversationList(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserChatListScreen);\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotFoundIcon.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderUserChatListScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Main\\Views\\ChatDetailScreen.tsx",[],["252","253"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ImageOverlayFullScreen\\Views\\ImageOverlayScreen.tsx",["254"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconCirclePanel\\Views\\IconCirclePanelScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Main\\Views\\ConversationDetailScreen.tsx",["255"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomButton\\Views\\CustomButtonScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx",[],["256","257"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\App.tsx",["258","259","260","261","262"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx",[],["263","264"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts",[],["265","266"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Header\\Views\\HeaderNotificationListScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Main\\Views\\NotificationListScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["267"],"import React from \"react\";\r\nimport \"./UserChatScreen.css\";\r\nimport CircleAvatarScreen from \"../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen\";\r\nimport { IConversationState } from \"../../../../../redux/Reducers/ConversationList.reducer\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CustomBadgeScreen from \"../../../../../libraries/Features/CustomBadge/Views/CustomBadgeScreen\";\r\nimport { useWindowSize } from \"../../../../../libraries/Hooks/useWindowSize\";\r\n\r\nconst iconunread = require(\"./Icons/iconunread.svg\").default;\r\n\r\nfunction UserChatScreen(props: IConversationState) {\r\n  const history = useHistory();\r\n  const [width, height] = useWindowSize();\r\n\r\n  const redirectToChatDetail = () => {\r\n    let kind = \"personal\";\r\n    if (props.isGroup) {\r\n      kind = \"group\";\r\n    }\r\n    history.push(`/${kind}/${props.id}`);\r\n\r\n    props.setIsActive(props.isGroup, props.id);\r\n  };\r\n\r\n  const renderUserImage = () => {\r\n    let widthAva=\"48px\";\r\n    let heightAva=\"48px\";\r\n    if (width < 768) {\r\n      widthAva=\"40px\";\r\n      heightAva=\"40px\";\r\n    }\r\n    return (\r\n      <CircleAvatarScreen\r\n        class=\"\"\r\n        width={ widthAva }\r\n        height={ heightAva }\r\n        src={props.avatar}\r\n        alt=\"avatar\"\r\n        isOnline={props.isOnline}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        props.isActive\r\n          ? \"userchat-container userchat-container-active\"\r\n          : \"userchat-container\"\r\n      }\r\n      onClick={redirectToChatDetail}\r\n    >\r\n      <div className=\"userchat-image\">\r\n        {\r\n          renderUserImage()\r\n        }\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span\r\n            className={\r\n              props.hasReadLastMess\r\n                ? \"userchat-username app-mainfont\"\r\n                : \"userchat-username app-mainfont userchat-unreadcontext\"\r\n            }\r\n          >\r\n            {props.name}\r\n          </span>\r\n          {props.isGroup && (\r\n            <CustomBadgeScreen\r\n              text=\"Nhóm\"\r\n              class=\"userchat-groupchat\"\r\n            ></CustomBadgeScreen>\r\n          )}\r\n          <span className=\"userchat-timeoflastmess app-mainfont\">\r\n            {props.timeToReadLastMess}\r\n          </span>\r\n        </div>\r\n        {props.hasReadLastMess ? (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess\">{ props.lastMess }</h3>\r\n          </div>\r\n        ) : (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess userchat-unreadcontext\">\r\n              {props.lastMess}\r\n            </h3>\r\n            <img src={iconunread} className=\"userchat-icon-unread\" alt=\"\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserChatScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Views\\NotificationScreen.tsx",["268"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx",[],["269","270"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfGroupNotiChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotification.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Models\\Notification.ts",[],["271","272"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx",[],["273","274"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\Main\\Views\\NavbarScreen.tsx",["275","276","277","278"],"import React, { useState } from 'react';\r\nimport { ENUM_KIND_OF_ICONPANEL } from '../../../../libraries/Constants/KindOfIconPanel';\r\nimport ModalScreen from '../../../../libraries/Features/Modal/Views/ModalScreen';\r\nimport ToggleSwitchScreen from '../../../../libraries/Features/ToggleSwitch/Views/ToggleSwitchScreen';\r\nimport IconPanelScreen from '../../IconPanel/Views/IconPanelScreen';\r\nimport './NavbarScreen.css';\r\n\r\nconst iconfriend = require('./Icons/iconfriend.svg').default;\r\nconst iconmessage = require('./Icons/iconmessage.svg').default;\r\nconst iconwhitenoti = require('./Icons/iconwhitenoti.svg').default;\r\nconst iconbrownnoti = require('../../../../libraries/Icons/iconbrownnoti.svg').default;\r\nconst iconquestion = require('../../../../libraries/Icons/iconquestion.svg').default;\r\n\r\nfunction NavbarScreen(props: any) {\r\n  const { activedIcon , setActivedIcon } = props;\r\n\r\n  // const eleContext = (\r\n  //   <div className=\"noti-context\">\r\n  //     <div className=\"brownnoti-container\">\r\n  //       <img src={ iconbrownnoti }  alt=\"\"></img>\r\n  //     </div>\r\n  //     <div className=\"app-mainfont\">\r\n  //       <h4>Thông báo</h4>\r\n  //       <span>Tất cả các thông báo</span>\r\n  //     </div>\r\n  //     <ToggleSwitchScreen></ToggleSwitchScreen>\r\n  //   </div>\r\n  // );\r\n\r\n  return (\r\n    <div className=\"navbar-container\">\r\n      <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.MESSAGES } srcImg={ iconmessage } contextToolTip={\"Trò chuyện\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.MESSAGES)} }></IconPanelScreen>\r\n      <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.FRIENDS } srcImg={ iconfriend } contextToolTip={\"Bạn bè\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.FRIENDS)} }></IconPanelScreen>\r\n      {/* <ModalScreen headerContent={ \"Cài đặt thông báo\" } context={ eleContext } hasPadding={ true }>\r\n            <div>\r\n              <IconPanelScreen isActive={false} srcImg={ iconwhitenoti } contextToolTip={\"Thông báo\"}></IconPanelScreen>\r\n            </div>\r\n          </ModalScreen> */}\r\n      <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.NOTI } srcImg={ iconwhitenoti } contextToolTip={\"Thông báo\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.NOTI)} }></IconPanelScreen> \r\n      <div className=\"navbar-iconpanel-last\">\r\n        <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.QUESTIONS } srcImg={ iconquestion } contextToolTip={\"Giải đáp\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.QUESTIONS)} }></IconPanelScreen>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavbarScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\Main\\Views\\NavDetailScreen.tsx",[],["279","280"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Detail\\Views\\PersonalDetailScreen.tsx",["281"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx",["282"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfMessage.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Main\\Views\\FriendListScreen.tsx",["283","284","285","286"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Friend\\Views\\FriendScreen.tsx",["287"],"import React from \"react\";\r\nimport \"./FriendScreen.css\";\r\nimport CircleAvatarScreen from \"../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useWindowSize } from \"../../../../../libraries/Hooks/useWindowSize\";\r\nimport { IFriend } from \"../Models/Friend\";\r\n\r\nfunction FriendScreen(props: IFriend) {\r\n  const history = useHistory();\r\n  const [width, height] = useWindowSize();\r\n\r\n  const redirectToChatDetail = () => {\r\n    let kind = \"personal\";\r\n    \r\n    history.push(`/${kind}/${props.id}`);\r\n  };\r\n\r\n  const renderUserImage = () => {\r\n    let widthAva=\"48px\";\r\n    let heightAva=\"48px\";\r\n    if (width < 768) {\r\n      widthAva=\"40px\";\r\n      heightAva=\"40px\";\r\n    }\r\n    return (\r\n      <CircleAvatarScreen\r\n        class=\"\"\r\n        width={ widthAva }\r\n        height={ heightAva }\r\n        src={props.avatar}\r\n        alt=\"avatar\"\r\n        isOnline={props.isOnline}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\"userchat-container\" }\r\n      onClick={redirectToChatDetail}\r\n    >\r\n      <div className=\"userchat-image\">\r\n        {\r\n          renderUserImage()\r\n        }\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span\r\n            className={ \"userchat-username app-mainfont userchat-unreadcontext\" }\r\n          >\r\n            {props.name}\r\n          </span>\r\n        </div>\r\n        <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess\">\r\n              {props.context}\r\n            </h3>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\LoadingSkeletons.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\SkeletonNavbarDetailScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Conversion.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ResponseMess.reducer.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx",["288"],"import React, { useRef , useEffect } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport './MainPopupScreen.css';\r\n\r\nconst MainPopupScreen = (props: any) =>{ \r\n  const ref = useRef<any>(null);\r\n\r\n  // const closeTooltip = () => ref.current.close();\r\n\r\n  function ClosePopupWhenScroll(ref: any) {\r\n    useEffect(() => {\r\n      document.addEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      return () => {\r\n        document.removeEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      };\r\n    }, [ref]);\r\n  }\r\n\r\n  ClosePopupWhenScroll(ref);\r\n  \r\n  return (\r\n    <Popup\r\n      ref={ref}\r\n      trigger={\r\n        props.children\r\n      }\r\n      position={['bottom left', 'bottom center']}\r\n      closeOnDocumentClick={true}\r\n      arrow={false}\r\n      repositionOnResize={true}\r\n    >\r\n        <div className=\"mainpopup-container\">\r\n            {\r\n            props.context\r\n            }\r\n        </div>\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default MainPopupScreen;",["289","290"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\IconPanel\\Views\\IconPanelScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Header\\Views\\HeaderScreen.tsx",["291"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx",["292"],"import React, { useState } from 'react';\r\nimport './BodyScreen.css';\r\nimport NavbarScreen from './../../../features/Navbar/Main/Views/NavbarScreen'\r\n// import UserChatListScreen from '../../../features/NavDetail/UserChatList/Main/Views/UserChatListScreen';\r\nimport ChatDetailScreen from '../../../features/ChatDetail/Main/Views/ChatDetailScreen';\r\nimport {\r\n  BrowserRouter as Router\r\n} from \"react-router-dom\";\r\nimport { useWindowSize } from '../../../libraries/Hooks/useWindowSize';\r\nimport { ENUM_KIND_OF_ICONPANEL } from '../../../libraries/Constants/KindOfIconPanel';\r\nimport NavDetailScreen from '../../../features/NavDetail/Main/Views/NavDetailScreen';\r\n\r\nfunction BodyScreen(props : any) {\r\n  const [activedIcon , setActivedIcon] = useState(ENUM_KIND_OF_ICONPANEL.MESSAGES);\r\n  const { hasNavbar } = props;\r\n  const [width, height] = useWindowSize();\r\n\r\n  const eleHeader: any = document.querySelector('.header-container');\r\n  const heightHeader = eleHeader ? eleHeader.offsetHeight : 50\r\n  const styleInline = {\r\n    height: height- heightHeader\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"body-container\" style = { styleInline }>\r\n        <div className={ hasNavbar ? \"body-left\" : \"body-left body-left--hide\"}>\r\n          <NavbarScreen activedIcon={ activedIcon } setActivedIcon={ setActivedIcon }></NavbarScreen>\r\n        </div>\r\n        <div className={ hasNavbar ? \"body-right--hasnavbar body-right\" : \"body-right\"}>\r\n          <NavDetailScreen  activedIcon={ activedIcon } setGuidedTourIsRunning={ props.setGuidedTourIsRunning}></NavDetailScreen>\r\n          <ChatDetailScreen hasChat={ true }></ChatDetailScreen>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default BodyScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Message.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx",["293"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\UploadImage\\Views\\UploadImageScreen.tsx",["294"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Functions\\BuildFileSelector.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\Main\\Views\\ChatInputScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfIconPanel.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx",["295"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\DatetimeChat\\Views\\DatetimeChatScreen.tsx",[],{"ruleId":"296","severity":1,"message":"297","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":30},{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","replacedBy":"303"},{"ruleId":"296","severity":1,"message":"304","line":82,"column":10,"nodeType":"298","messageId":"299","endLine":82,"endColumn":15},{"ruleId":"305","severity":1,"message":"306","line":94,"column":5,"nodeType":"307","endLine":94,"endColumn":7,"suggestions":"308"},{"ruleId":"300","replacedBy":"309"},{"ruleId":"302","replacedBy":"310"},{"ruleId":"305","severity":1,"message":"311","line":38,"column":7,"nodeType":"307","endLine":38,"endColumn":9,"suggestions":"312"},{"ruleId":"296","severity":1,"message":"313","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":19},{"ruleId":"300","replacedBy":"314"},{"ruleId":"302","replacedBy":"315"},{"ruleId":"296","severity":1,"message":"316","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"296","severity":1,"message":"317","line":5,"column":19,"nodeType":"298","messageId":"299","endLine":5,"endColumn":32},{"ruleId":"296","severity":1,"message":"318","line":5,"column":34,"nodeType":"298","messageId":"299","endLine":5,"endColumn":40},{"ruleId":"296","severity":1,"message":"319","line":5,"column":42,"nodeType":"298","messageId":"299","endLine":5,"endColumn":46},{"ruleId":"296","severity":1,"message":"320","line":5,"column":48,"nodeType":"298","messageId":"299","endLine":5,"endColumn":60},{"ruleId":"300","replacedBy":"321"},{"ruleId":"302","replacedBy":"322"},{"ruleId":"300","replacedBy":"323"},{"ruleId":"302","replacedBy":"324"},{"ruleId":"296","severity":1,"message":"325","line":13,"column":17,"nodeType":"298","messageId":"299","endLine":13,"endColumn":23},{"ruleId":"296","severity":1,"message":"325","line":15,"column":19,"nodeType":"298","messageId":"299","endLine":15,"endColumn":25},{"ruleId":"300","replacedBy":"326"},{"ruleId":"302","replacedBy":"327"},{"ruleId":"300","replacedBy":"328"},{"ruleId":"302","replacedBy":"329"},{"ruleId":"300","replacedBy":"330"},{"ruleId":"302","replacedBy":"331"},{"ruleId":"296","severity":1,"message":"332","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":25},{"ruleId":"296","severity":1,"message":"333","line":3,"column":8,"nodeType":"298","messageId":"299","endLine":3,"endColumn":19},{"ruleId":"296","severity":1,"message":"334","line":4,"column":8,"nodeType":"298","messageId":"299","endLine":4,"endColumn":26},{"ruleId":"296","severity":1,"message":"335","line":11,"column":7,"nodeType":"298","messageId":"299","endLine":11,"endColumn":20},{"ruleId":"300","replacedBy":"336"},{"ruleId":"302","replacedBy":"337"},{"ruleId":"296","severity":1,"message":"313","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":19},{"ruleId":null,"fatal":true,"severity":2,"message":"338","line":192,"column":28},{"ruleId":"296","severity":1,"message":"339","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":35},{"ruleId":"296","severity":1,"message":"340","line":4,"column":8,"nodeType":"298","messageId":"299","endLine":4,"endColumn":26},{"ruleId":"296","severity":1,"message":"304","line":257,"column":12,"nodeType":"298","messageId":"299","endLine":257,"endColumn":17},{"ruleId":"296","severity":1,"message":"341","line":258,"column":12,"nodeType":"298","messageId":"299","endLine":258,"endColumn":23},{"ruleId":"296","severity":1,"message":"325","line":10,"column":17,"nodeType":"298","messageId":"299","endLine":10,"endColumn":23},{"ruleId":"305","severity":1,"message":"342","line":14,"column":71,"nodeType":"298","endLine":14,"endColumn":78},{"ruleId":"300","replacedBy":"343"},{"ruleId":"302","replacedBy":"344"},{"ruleId":"305","severity":1,"message":"345","line":26,"column":6,"nodeType":"307","endLine":26,"endColumn":8,"suggestions":"346"},{"ruleId":"296","severity":1,"message":"347","line":16,"column":10,"nodeType":"298","messageId":"299","endLine":16,"endColumn":15},{"ruleId":"296","severity":1,"message":"313","line":11,"column":22,"nodeType":"298","messageId":"299","endLine":11,"endColumn":31},{"ruleId":"348","severity":1,"message":"349","line":14,"column":13,"nodeType":"350","endLine":14,"endColumn":37},{"ruleId":"351","severity":1,"message":"352","line":10,"column":20,"nodeType":"350","endLine":10,"endColumn":65},"@typescript-eslint/no-unused-vars","'ENUM_KIND_OF_MESSAGE' is defined but never used.","Identifier","unusedVar","no-native-reassign",["353"],"no-negated-in-lhs",["354"],"'query' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'setUserChatIsAcTiveByPath'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["355"],["353"],["354"],"React Hook useEffect has a missing dependency: 'mainMiniImage.index'. Either include it or remove the dependency array.",["356"],"'useParams' is defined but never used.",["353"],["354"],"'useEffect' is defined but never used.","'CallBackProps' is defined but never used.","'STATUS' is defined but never used.","'Step' is defined but never used.","'StoreHelpers' is defined but never used.",["353"],["354"],["353"],["354"],"'height' is assigned a value but never used.",["353"],["354"],["353"],["354"],["353"],["354"],"'useState' is defined but never used.","'ModalScreen' is defined but never used.","'ToggleSwitchScreen' is defined but never used.","'iconbrownnoti' is assigned a value but never used.",["353"],["354"],"Parsing error: '...' expected.","'ENUM_KIND_OF_NOTFOUNDICON' is defined but never used.","'DataNotFoundScreen' is defined but never used.","'hasSkeleton' is assigned a value but never used.","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.",["353"],["354"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["357"],"'width' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},"Update the dependencies array to be: [props, setUserChatIsAcTiveByPath]",{"range":"364","text":"365"},"Update the dependencies array to be: [mainMiniImage.index]",{"range":"366","text":"367"},"Update the dependencies array to be: [props]",{"range":"368","text":"369"},[3877,3879],"[props, setUserChatIsAcTiveByPath]",[1352,1354],"[mainMiniImage.index]",[1144,1146],"[props]"]