[{"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\CurrentUser.reducer.ts":"1","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts":"2","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx":"3","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx":"4","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx":"5","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotFoundIcon.ts":"6","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderUserChatListScreen.tsx":"7","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Main\\Views\\ChatDetailScreen.tsx":"8","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ImageOverlayFullScreen\\Views\\ImageOverlayScreen.tsx":"9","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconCirclePanel\\Views\\IconCirclePanelScreen.tsx":"10","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Main\\Views\\ConversationDetailScreen.tsx":"11","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomButton\\Views\\CustomButtonScreen.tsx":"12","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx":"13","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx":"14","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx":"15","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\App.tsx":"16","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx":"17","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts":"18","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Header\\Views\\HeaderNotificationListScreen.tsx":"19","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Main\\Views\\NotificationListScreen.tsx":"20","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"21","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Views\\NotificationScreen.tsx":"22","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx":"23","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfGroupNotiChat.ts":"24","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotification.ts":"25","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Models\\Notification.ts":"26","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx":"27","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\Main\\Views\\NavbarScreen.tsx":"28","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\Main\\Views\\NavDetailScreen.tsx":"29","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts":"30","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Detail\\Views\\PersonalDetailScreen.tsx":"31","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx":"32","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfMessage.ts":"33","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Main\\Views\\FriendListScreen.tsx":"34","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Friend\\Views\\FriendScreen.tsx":"35","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\LoadingSkeletons.tsx":"36","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\SkeletonNavbarDetailScreen.tsx":"37","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts":"38","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Conversion.database.ts":"39","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ResponseMess.reducer.ts":"40","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx":"41","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts":"42","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\IconPanel\\Views\\IconPanelScreen.tsx":"43","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx":"44","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Header\\Views\\HeaderScreen.tsx":"45","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx":"46","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx":"47","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx":"48","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Message.database.ts":"49","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx":"50","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx":"51","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\UploadImage\\Views\\UploadImageScreen.tsx":"52","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Functions\\BuildFileSelector.ts":"53","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\Main\\Views\\ChatInputScreen.tsx":"54","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfIconPanel.ts":"55","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx":"56","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\DatetimeChat\\Views\\DatetimeChatScreen.tsx":"57","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\store.ts":"58","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Body\\Views\\BodyCreateGroupScreen.tsx":"59","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx":"60","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Modal\\Views\\ModalScreen.tsx":"61","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Main\\Views\\CreateGroupScreen.tsx":"62","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomBadge\\Views\\CustomBadgeScreen.tsx":"63","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\BodyPanel\\Views\\BodyPanelScreen.tsx":"64","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Models\\ChatList.ts":"65","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Body\\Views\\BodyConversationDetailScreen.tsx":"66","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\ResponseMess.action.ts":"67","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Functions\\DecodeHTML.ts":"68","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Detail\\Views\\GroupDetailScreen.tsx":"69","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Header\\Views\\HeaderConversationDetailScreen.tsx":"70","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx":"71","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\CurrentChat\\Views\\CurrentChatScreen.tsx":"72","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Views\\MessageFoundScreen.tsx":"73","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Models\\MessageFound.ts":"74","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\ResponseMess.type.ts":"75","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ConversationList.reducer.ts":"76","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\App.tsx":"77","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\redux\\Stores\\Configure.ts":"78","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\CustomButton\\Views\\CustomButtonScreen.tsx":"79","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx":"80","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfConversation.ts":"81","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderUserChatListScreen.tsx":"82","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Models\\Notification.ts":"83","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\redux\\Actions\\ResponseMess.action.ts":"84","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts":"85","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx":"86","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx":"87","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx":"88","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx":"89","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx":"90","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Views\\MessageFoundScreen.tsx":"91","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx":"92","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Models\\MessageFound.ts":"93","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\SearchChat\\Views\\SearchChatScreen.tsx":"94","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"95","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Main\\Views\\NotificationListScreen.tsx":"96","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Main\\Views\\FriendListScreen.tsx":"97","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Friend\\Views\\FriendScreen.tsx":"98","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx":"99","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx":"100","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx":"101","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\UploadImage\\Views\\UploadImageScreen.tsx":"102","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx":"103","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Models\\ChatList.ts":"104"},{"size":714,"mtime":1610072974204,"results":"105","hashOfConfig":"106"},{"size":258,"mtime":1610072974159,"results":"107","hashOfConfig":"106"},{"size":2067,"mtime":1610788367384,"results":"108","hashOfConfig":"106"},{"size":1326,"mtime":1610506185564,"results":"109","hashOfConfig":"106"},{"size":6967,"mtime":1610698237697,"results":"110","hashOfConfig":"106"},{"size":100,"mtime":1610502552056,"results":"111","hashOfConfig":"106"},{"size":812,"mtime":1610447581244,"results":"112","hashOfConfig":"106"},{"size":1852,"mtime":1610502776523,"results":"113","hashOfConfig":"106"},{"size":5554,"mtime":1610072974191,"results":"114","hashOfConfig":"106"},{"size":596,"mtime":1610072974188,"results":"115","hashOfConfig":"106"},{"size":754,"mtime":1610072974169,"results":"116","hashOfConfig":"106"},{"size":382,"mtime":1610072974186,"results":"117","hashOfConfig":"106"},{"size":1981,"mtime":1610362292754,"results":"118","hashOfConfig":"106"},{"size":17120,"mtime":1610792135784,"results":"119","hashOfConfig":"106"},{"size":335,"mtime":1610072974195,"results":"120","hashOfConfig":"106"},{"size":3536,"mtime":1610933652409,"results":"121","hashOfConfig":"106"},{"size":390,"mtime":1610072974189,"results":"122","hashOfConfig":"106"},{"size":229,"mtime":1610072974202,"results":"123","hashOfConfig":"106"},{"size":2752,"mtime":1610503907891,"results":"124","hashOfConfig":"106"},{"size":2476,"mtime":1610522782426,"results":"125","hashOfConfig":"106"},{"size":2888,"mtime":1610508769615,"results":"126","hashOfConfig":"106"},{"size":3479,"mtime":1610525533466,"results":"127","hashOfConfig":"106"},{"size":1181,"mtime":1610509137052,"results":"128","hashOfConfig":"106"},{"size":108,"mtime":1610511624029,"results":"129","hashOfConfig":"106"},{"size":99,"mtime":1610511995811,"results":"130","hashOfConfig":"106"},{"size":759,"mtime":1610522136110,"results":"131","hashOfConfig":"106"},{"size":281,"mtime":1610072974182,"results":"132","hashOfConfig":"106"},{"size":2663,"mtime":1610447925134,"results":"133","hashOfConfig":"106"},{"size":1109,"mtime":1610698315336,"results":"134","hashOfConfig":"106"},{"size":790,"mtime":1610072974206,"results":"135","hashOfConfig":"106"},{"size":9646,"mtime":1610072974176,"results":"136","hashOfConfig":"106"},{"size":9227,"mtime":1610935678047,"results":"137","hashOfConfig":"106"},{"size":92,"mtime":1610072974183,"results":"138","hashOfConfig":"106"},{"size":10961,"mtime":1610934461770,"results":"139","hashOfConfig":"106"},{"size":1700,"mtime":1610527458595,"results":"140","hashOfConfig":"106"},{"size":823,"mtime":1610706626247,"results":"141","hashOfConfig":"106"},{"size":2219,"mtime":1610769258949,"results":"142","hashOfConfig":"106"},{"size":53,"mtime":1610072974205,"results":"143","hashOfConfig":"106"},{"size":369,"mtime":1610072974206,"results":"144","hashOfConfig":"106"},{"size":884,"mtime":1610072974204,"results":"145","hashOfConfig":"106"},{"size":1002,"mtime":1610072974195,"results":"146","hashOfConfig":"106"},{"size":441,"mtime":1610094168719,"results":"147","hashOfConfig":"106"},{"size":880,"mtime":1610599937309,"results":"148","hashOfConfig":"106"},{"size":3102,"mtime":1610791748534,"results":"149","hashOfConfig":"106"},{"size":3343,"mtime":1610352280147,"results":"150","hashOfConfig":"106"},{"size":10654,"mtime":1610428595865,"results":"151","hashOfConfig":"106"},{"size":1729,"mtime":1610779859694,"results":"152","hashOfConfig":"106"},{"size":1861,"mtime":1610934718768,"results":"153","hashOfConfig":"106"},{"size":6338,"mtime":1610072974206,"results":"154","hashOfConfig":"106"},{"size":3361,"mtime":1610072974162,"results":"155","hashOfConfig":"106"},{"size":539,"mtime":1610072974160,"results":"156","hashOfConfig":"106"},{"size":628,"mtime":1610072974156,"results":"157","hashOfConfig":"106"},{"size":748,"mtime":1610072974196,"results":"158","hashOfConfig":"106"},{"size":5498,"mtime":1610074644605,"results":"159","hashOfConfig":"106"},{"size":106,"mtime":1610439959979,"results":"160","hashOfConfig":"106"},{"size":687,"mtime":1610072974159,"results":"161","hashOfConfig":"106"},{"size":378,"mtime":1610770729201,"results":"162","hashOfConfig":"106"},{"size":238,"mtime":1610072974205,"results":"163","hashOfConfig":"106"},{"size":9393,"mtime":1610428609738,"results":"164","hashOfConfig":"106"},{"size":212,"mtime":1610072974192,"results":"165","hashOfConfig":"106"},{"size":1200,"mtime":1610788309776,"results":"166","hashOfConfig":"106"},{"size":505,"mtime":1610072974172,"results":"167","hashOfConfig":"106"},{"size":366,"mtime":1610072974185,"results":"168","hashOfConfig":"106"},{"size":366,"mtime":1610072974184,"results":"169","hashOfConfig":"106"},{"size":1130,"mtime":1610418695363,"results":"170","hashOfConfig":"106"},{"size":90400,"mtime":1610072974167,"results":"171","hashOfConfig":"106"},{"size":479,"mtime":1610072974202,"results":"172","hashOfConfig":"106"},{"size":175,"mtime":1610525020233,"results":"173","hashOfConfig":"106"},{"size":13395,"mtime":1610788356090,"results":"174","hashOfConfig":"106"},{"size":2064,"mtime":1610096124064,"results":"175","hashOfConfig":"106"},{"size":1562,"mtime":1610935610429,"results":"176","hashOfConfig":"106"},{"size":582,"mtime":1610072974161,"results":"177","hashOfConfig":"106"},{"size":1694,"mtime":1610794970068,"results":"178","hashOfConfig":"106"},{"size":167,"mtime":1610794765267,"results":"179","hashOfConfig":"106"},{"size":165,"mtime":1610072974205,"results":"180","hashOfConfig":"106"},{"size":5644,"mtime":1610072974204,"results":"181","hashOfConfig":"106"},{"size":3536,"mtime":1610941026072,"results":"182","hashOfConfig":"183"},{"size":459,"mtime":1610941026212,"results":"184","hashOfConfig":"183"},{"size":382,"mtime":1610941026175,"results":"185","hashOfConfig":"183"},{"size":1326,"mtime":1610941026179,"results":"186","hashOfConfig":"183"},{"size":91,"mtime":1610941026163,"results":"187","hashOfConfig":"183"},{"size":812,"mtime":1610941026153,"results":"188","hashOfConfig":"183"},{"size":759,"mtime":1610941026149,"results":"189","hashOfConfig":"183"},{"size":479,"mtime":1610941026208,"results":"190","hashOfConfig":"183"},{"size":258,"mtime":1610941026096,"results":"191","hashOfConfig":"183"},{"size":8799,"mtime":1610943169244,"results":"192","hashOfConfig":"183"},{"size":539,"mtime":1610941026104,"results":"193","hashOfConfig":"183"},{"size":1691,"mtime":1610954177998,"results":"194","hashOfConfig":"183"},{"size":1981,"mtime":1610941026096,"results":"195","hashOfConfig":"183"},{"size":3361,"mtime":1610941026104,"results":"196","hashOfConfig":"183"},{"size":1903,"mtime":1610953889494,"results":"197","hashOfConfig":"183"},{"size":212,"mtime":1610941026188,"results":"198","hashOfConfig":"183"},{"size":167,"mtime":1610941026100,"results":"199","hashOfConfig":"183"},{"size":515,"mtime":1610953824556,"results":"200","hashOfConfig":"183"},{"size":2888,"mtime":1610945202573,"results":"201","hashOfConfig":"183"},{"size":7377,"mtime":1610946333708,"results":"202","hashOfConfig":"183"},{"size":10982,"mtime":1610952109333,"results":"203","hashOfConfig":"183"},{"size":1700,"mtime":1610941026141,"results":"204","hashOfConfig":"183"},{"size":335,"mtime":1610941026192,"results":"205","hashOfConfig":"183"},{"size":8620,"mtime":1610946584495,"results":"206","hashOfConfig":"183"},{"size":1872,"mtime":1610952201594,"results":"207","hashOfConfig":"183"},{"size":628,"mtime":1610941026092,"results":"208","hashOfConfig":"183"},{"size":687,"mtime":1610941026100,"results":"209","hashOfConfig":"183"},{"size":1130,"mtime":1610941026108,"results":"210","hashOfConfig":"183"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1un77o0",{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"218"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"221"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"221"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"232"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"282"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"314"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"388","messages":"389","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1lzi66g",{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"430","messages":"431","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\CurrentUser.reducer.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx",["446"],"import React from 'react';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../Constants/KindOfMessage';\r\nimport IconImageScreen from '../../../IconImage/Views/IconImageScreen';\r\nimport ModalScreen from '../../../Modal/Views/ModalScreen';\r\nimport './DetailPopupScreen.css';\r\n\r\nfunction DetailPopupScreen(props : any){\r\n    const { listEles , eleHeader } = props;\r\n    const showDetailPopup = () =>{\r\n        return listEles.map((ele:any , index:number) =>{\r\n            if(ele.eleContext){\r\n\r\n                return  <ModalScreen  open={ false } headerContent={ \"Cài đặt thông báo\" } context={ ele.eleContext } hasPadding={ true }>\r\n                            <li onClick={ ele.onClick }>\r\n                                <IconImageScreen src={ ele.icon } alt=\"replay\" class={\"\"}></IconImageScreen>\r\n                                <span className=\"app-mainfont\">\r\n                                    { ele.text }\r\n                                </span>           \r\n                            </li>\r\n                        </ModalScreen>\r\n            }\r\n            return (\r\n                <li onClick={ ele.onClick }>\r\n                    <IconImageScreen src={ ele.icon } alt=\"replay\" class={\"\"}></IconImageScreen>\r\n                    <span className=\"app-mainfont\">\r\n                        { ele.text }\r\n                    </span>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"detailpopup-container\">\r\n            {\r\n                eleHeader && eleHeader\r\n            }\r\n            <ul className=\"detailpopup-detail\">\r\n                {\r\n                    showDetailPopup()\r\n                }\r\n            </ul>\r\n\r\n                  {/* <ModalScreen headerContent={ \"Cài đặt thông báo\" } context={ eleContext } hasPadding={ true }>\r\n            <div>\r\n              <IconPanelScreen isActive={false} srcImg={ iconwhitenoti } contextToolTip={\"Thông báo\"}></IconPanelScreen>\r\n            </div>\r\n          </ModalScreen> */}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DetailPopupScreen;",["447","448"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx",[],["449","450"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx",["451","452"],"import React, { useState , useEffect , useRef , ChangeEvent } from 'react';\r\nimport HeaderUserChatListScreen from '../../Header/Views/HeaderUserChatListScreen';\r\nimport UserChatScreen from '../../UserChat/Views/UserChatScreen';\r\nimport './UserChatListScreen.css';\r\nimport CustomInputScreen from '../../../../../libraries/Features/CustomInput/Views/CustomInputScreen';\r\nimport { connect } from 'react-redux';\r\nimport { getConversationList } from '../../../../../redux/Actions/ConversationList.action';\r\nimport { IConversationState } from '../../../../../redux/Reducers/ConversationList.reducer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ENUM_KIND_OF_CONVERSATION } from '../../../../../libraries/Constants/KindOfConversation';\r\nimport DataNotFoundScreen from '../../../../../libraries/Features/DataNotFound/Views/DataNotFoundScreen';\r\nimport { ENUM_KIND_OF_NOTFOUNDICON } from '../../../../../libraries/Constants/KindOfNotFoundIcon';\r\n\r\nconst iconsearch = require(\"../../../../../libraries/Icons/iconsearch.svg\").default;\r\n\r\nconst styleCustomInput = {\r\n  backgroundImage: `url('${iconsearch}')`,\r\n  backgroundPosition: \"3% 50%\",\r\n  padding: \"12px 20px 12px 40px\",\r\n  borderRadius: \"0.7rem\",\r\n  fontSize: \"1rem\",\r\n};\r\n\r\nconst conversationList: IConversationState[] = [\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: false,\r\n    id: 1,\r\n    isActive: false,\r\n    isGroup: false,\r\n    isOnline: true,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Trung Đức\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: false,\r\n    id: 2,\r\n    isActive: false,\r\n    isGroup: true,\r\n    isOnline: false,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Hội người yêu chim\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: true,\r\n    id: 3,\r\n    isActive: false,\r\n    isGroup: true,\r\n    isOnline: true,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Hội người yêu chim\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n  {\r\n    avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n    hasReadLastMess: true,\r\n    id: 4,\r\n    isActive: false,\r\n    isGroup: false,\r\n    isOnline: true,\r\n    lastMess:\r\n      \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n    name: \"Trung Đức\",\r\n    setIsActive: null,\r\n    timeToReadLastMess: \"09:09\",\r\n  },\r\n];\r\n\r\n\r\nfunction UserChatListScreen(props: any) {\r\n  const typingTimeoutRef = useRef<any>(null);\r\n  const [query , setQuery] = useState<string>(\"\");\r\n  const [activedUserChat , setActivedUserChat] = useState({\r\n    isGroup:false,\r\n    id: -1\r\n  });\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const id = 3;\r\n    props.getConversationList(id);\r\n\r\n    setUserChatIsAcTiveByPath();\r\n  },[])\r\n  \r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) =>{\r\n    if(typingTimeoutRef.current){\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n\r\n    typingTimeoutRef.current = setTimeout(() =>{\r\n      setQuery(e.target.value);\r\n    },5e2);\r\n  }\r\n\r\n  const setUserChatIsAcTiveByPath = () =>{\r\n    const currentPathName = history.location.pathname;\r\n    const arrPath = currentPathName.split(\"/\");\r\n    if(arrPath){\r\n      let isGroup = false;\r\n      let id = parseInt(arrPath[2]);\r\n      if(arrPath[1] === ENUM_KIND_OF_CONVERSATION.GROUP){\r\n        isGroup = true;\r\n      }else if(arrPath[1] === ENUM_KIND_OF_CONVERSATION.PERSONAL){\r\n        isGroup = false;\r\n      }else{\r\n        return;\r\n      }\r\n      if(arrPath.length === 4 && arrPath[2] === \"detail\"){\r\n        id = parseInt(arrPath[3]);\r\n      }\r\n      setUserChatIsAcTive(isGroup , id);\r\n    }\r\n  }\r\n\r\n  const setUserChatIsAcTive = (isGroup:boolean , id:number) =>{\r\n    setActivedUserChat({\r\n      isGroup,\r\n      id,\r\n    });\r\n  };\r\n\r\n  const ShowConversationList = () => {\r\n    if (conversationList.length === 0) {\r\n      return <DataNotFoundScreen text={\"Không tìm thấy kết quả\"} icon={ ENUM_KIND_OF_NOTFOUNDICON.DATA } isPosition={ true }></DataNotFoundScreen>;\r\n    }\r\n    return conversationList.map(\r\n      (conversationState: IConversationState, idx: number) => (\r\n        <UserChatScreen\r\n          key={idx}\r\n          id={conversationState.id}\r\n          hasReadLastMess={conversationState.hasReadLastMess}\r\n          isGroup={conversationState.isGroup}\r\n          isOnline={conversationState.isGroup}\r\n          name={conversationState.name}\r\n          lastMess={conversationState.lastMess}\r\n          timeToReadLastMess={conversationState.timeToReadLastMess}\r\n          avatar={conversationState.avatar}\r\n          isActive={\r\n            conversationState.isGroup === activedUserChat.isGroup &&\r\n            conversationState.id === activedUserChat.id\r\n          }\r\n          setIsActive={setUserChatIsAcTive}\r\n        ></UserChatScreen>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"userchatlist-top\">\r\n        <HeaderUserChatListScreen></HeaderUserChatListScreen>\r\n        <CustomInputScreen\r\n          style={styleCustomInput}\r\n          class=\"searchinput-container step1\"\r\n          placeHolder=\"Tìm kiếm cuộc trò chuyện\"\r\n          isMultiline={false}\r\n          isTextArea={ true }\r\n          onChange={ onChange }\r\n          onClick={ () => props.setGuidedTourIsRunning(false) }\r\n          hasClearText={ true }\r\n        ></CustomInputScreen>\r\n      </div>\r\n      <div className=\"userchatlist-bottom\">\r\n        {\r\n          ShowConversationList()\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    conversationList: state.conversationList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getConversationList: (id: number) => dispatch(getConversationList(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserChatListScreen);\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotFoundIcon.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderUserChatListScreen.tsx",[],["453","454"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Main\\Views\\ChatDetailScreen.tsx",[],["455","456"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ImageOverlayFullScreen\\Views\\ImageOverlayScreen.tsx",["457"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconCirclePanel\\Views\\IconCirclePanelScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Main\\Views\\ConversationDetailScreen.tsx",["458"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomButton\\Views\\CustomButtonScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx",[],["459","460"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx",[],["461","462"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\App.tsx",["463","464","465","466","467"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx",[],["468","469"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Header\\Views\\HeaderNotificationListScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Main\\Views\\NotificationListScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["470"],"import React from \"react\";\r\nimport \"./UserChatScreen.css\";\r\nimport CircleAvatarScreen from \"../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen\";\r\nimport { IConversationState } from \"../../../../../redux/Reducers/ConversationList.reducer\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CustomBadgeScreen from \"../../../../../libraries/Features/CustomBadge/Views/CustomBadgeScreen\";\r\nimport { useWindowSize } from \"../../../../../libraries/Hooks/useWindowSize\";\r\n\r\nconst iconunread = require(\"./Icons/iconunread.svg\").default;\r\n\r\nfunction UserChatScreen(props: IConversationState) {\r\n  const history = useHistory();\r\n  const [width, height] = useWindowSize();\r\n\r\n  const redirectToChatDetail = () => {\r\n    let kind = \"personal\";\r\n    if (props.isGroup) {\r\n      kind = \"group\";\r\n    }\r\n    history.push(`/${kind}/${props.id}`);\r\n\r\n    props.setIsActive(props.isGroup, props.id);\r\n  };\r\n\r\n  const renderUserImage = () => {\r\n    let widthAva=\"48px\";\r\n    let heightAva=\"48px\";\r\n    if (width < 768) {\r\n      widthAva=\"40px\";\r\n      heightAva=\"40px\";\r\n    }\r\n    return (\r\n      <CircleAvatarScreen\r\n        class=\"\"\r\n        width={ widthAva }\r\n        height={ heightAva }\r\n        src={props.avatar}\r\n        alt=\"avatar\"\r\n        isOnline={props.isOnline}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        props.isActive\r\n          ? \"userchat-container userchat-container-active\"\r\n          : \"userchat-container\"\r\n      }\r\n      onClick={redirectToChatDetail}\r\n    >\r\n      <div className=\"userchat-image\">\r\n        {\r\n          renderUserImage()\r\n        }\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span\r\n            className={\r\n              props.hasReadLastMess\r\n                ? \"userchat-username app-mainfont\"\r\n                : \"userchat-username app-mainfont userchat-unreadcontext\"\r\n            }\r\n          >\r\n            {props.name}\r\n          </span>\r\n          {props.isGroup && (\r\n            <CustomBadgeScreen\r\n              text=\"Nhóm\"\r\n              class=\"userchat-groupchat\"\r\n            ></CustomBadgeScreen>\r\n          )}\r\n          <span className=\"userchat-timeoflastmess app-mainfont\">\r\n            {props.timeToReadLastMess}\r\n          </span>\r\n        </div>\r\n        {props.hasReadLastMess ? (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess\">{ props.lastMess }</h3>\r\n          </div>\r\n        ) : (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess userchat-unreadcontext\">\r\n              {props.lastMess}\r\n            </h3>\r\n            <img src={iconunread} className=\"userchat-icon-unread\" alt=\"\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserChatScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Views\\NotificationScreen.tsx",["471"],"import React from 'react';\r\nimport { ENUM_KIND_OF_NOTIFICATION } from '../../../../../libraries/Constants/KindOfNotification';\r\nimport CircleAvatarScreen from '../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen';\r\nimport { decodeHTML } from '../../../../../libraries/Functions/DecodeHTML';\r\nimport { useWindowSize } from '../../../../../libraries/Hooks/useWindowSize';\r\nimport { getTimePeriod, INotification } from '../Models/Notification';\r\nimport './NotificationScreen.css';\r\n\r\nconst iconnotitag = require(\"./Icons/iconnotitag.svg\").default;\r\nconst iconnotikicked = require(\"./Icons/iconnotikicked.svg\").default;\r\nconst iconnotilike = require(\"./Icons/iconnotilike.svg\").default;\r\nconst iconnotireply = require(\"./Icons/iconnotireply.svg\").default;\r\n\r\nfunction NotificationScreen(props: INotification) {\r\n    const [width, height] = useWindowSize();\r\n\r\n    function context ():string{\r\n        switch (props.status) {\r\n            case ENUM_KIND_OF_NOTIFICATION.REPLY:\r\n                return \"đã trả lời bình luận của bạn trong &#8243; \" + props.context +\" &#8243;\";\r\n            case ENUM_KIND_OF_NOTIFICATION.KICKED:\r\n                return \"đã xóa bạn khỏi nhóm chat &#8243; \" + props.context +\" &#8243;\";\r\n            case ENUM_KIND_OF_NOTIFICATION.LIKE:\r\n                return \"đã tương tác bình luận của bạn \";\r\n            case ENUM_KIND_OF_NOTIFICATION.TAG:\r\n                return \"đã nhắc bạn trong một bình luận \";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    const icon = () =>{\r\n        switch (props.status) {\r\n            case ENUM_KIND_OF_NOTIFICATION.REPLY:\r\n                return iconnotireply;\r\n            case ENUM_KIND_OF_NOTIFICATION.KICKED:\r\n                return iconnotikicked;\r\n            case ENUM_KIND_OF_NOTIFICATION.LIKE:\r\n                return iconnotilike\r\n            case ENUM_KIND_OF_NOTIFICATION.TAG:\r\n                return iconnotitag;\r\n        }\r\n    }\r\n\r\n    const renderUserImage = () => {\r\n        let widthAva=\"48px\";\r\n        let heightAva=\"48px\";\r\n        if (width < 768) {\r\n            widthAva=\"40px\";\r\n            heightAva=\"40px\";\r\n        }\r\n\r\n        return (\r\n            <CircleAvatarScreen\r\n              class=\"\"\r\n              width={ widthAva }\r\n              height={ heightAva }\r\n              src={ props.avatar }\r\n              alt=\"avatar\"\r\n              isOnline={ false }\r\n              notiIcon={ icon() }\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n            props.isActive\r\n                ? \"userchat-container userchat-container-active notification-container\"\r\n                : \"userchat-container notification-container\"\r\n            }\r\n        >\r\n            <div className=\"userchat-image\">\r\n            {\r\n                renderUserImage()\r\n            }\r\n            </div>\r\n            <div className=\"userchat-context app-mainfont\">\r\n                <div>\r\n                    <div className=\"notification-context\">\r\n                        <p>{ props.username }</p>\r\n                        {\" \"}\r\n                        <span>{ decodeHTML(context()) }</span>\r\n                    </div>\r\n                    <span className=\"notification-time\">\r\n                        { getTimePeriod(props.time) } \r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotificationScreen;\r\n\r\n\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx",[],["472","473"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfGroupNotiChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfNotification.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Models\\Notification.ts",[],["474","475"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx",[],["476","477"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\Main\\Views\\NavbarScreen.tsx",["478","479","480","481"],"import React, { useState } from 'react';\r\nimport { ENUM_KIND_OF_ICONPANEL } from '../../../../libraries/Constants/KindOfIconPanel';\r\nimport ModalScreen from '../../../../libraries/Features/Modal/Views/ModalScreen';\r\nimport ToggleSwitchScreen from '../../../../libraries/Features/ToggleSwitch/Views/ToggleSwitchScreen';\r\nimport IconPanelScreen from '../../IconPanel/Views/IconPanelScreen';\r\nimport './NavbarScreen.css';\r\n\r\nconst iconfriend = require('./Icons/iconfriend.svg').default;\r\nconst iconmessage = require('./Icons/iconmessage.svg').default;\r\nconst iconwhitenoti = require('./Icons/iconwhitenoti.svg').default;\r\nconst iconbrownnoti = require('../../../../libraries/Icons/iconbrownnoti.svg').default;\r\nconst iconquestion = require('../../../../libraries/Icons/iconquestion.svg').default;\r\n\r\nfunction NavbarScreen(props: any) {\r\n  const { activedIcon , setActivedIcon } = props;\r\n\r\n  // const eleContext = (\r\n  //   <div className=\"noti-context\">\r\n  //     <div className=\"brownnoti-container\">\r\n  //       <img src={ iconbrownnoti }  alt=\"\"></img>\r\n  //     </div>\r\n  //     <div className=\"app-mainfont\">\r\n  //       <h4>Thông báo</h4>\r\n  //       <span>Tất cả các thông báo</span>\r\n  //     </div>\r\n  //     <ToggleSwitchScreen></ToggleSwitchScreen>\r\n  //   </div>\r\n  // );\r\n\r\n  return (\r\n    <div className=\"navbar-container\">\r\n      <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.MESSAGES } srcImg={ iconmessage } contextToolTip={\"Trò chuyện\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.MESSAGES)} }></IconPanelScreen>\r\n      <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.FRIENDS } srcImg={ iconfriend } contextToolTip={\"Bạn bè\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.FRIENDS)} }></IconPanelScreen>\r\n      {/* <ModalScreen headerContent={ \"Cài đặt thông báo\" } context={ eleContext } hasPadding={ true }>\r\n            <div>\r\n              <IconPanelScreen isActive={false} srcImg={ iconwhitenoti } contextToolTip={\"Thông báo\"}></IconPanelScreen>\r\n            </div>\r\n          </ModalScreen> */}\r\n      <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.NOTI } srcImg={ iconwhitenoti } contextToolTip={\"Thông báo\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.NOTI)} }></IconPanelScreen> \r\n      <div className=\"navbar-iconpanel-last\">\r\n        <IconPanelScreen isActive={ activedIcon === ENUM_KIND_OF_ICONPANEL.QUESTIONS } srcImg={ iconquestion } contextToolTip={\"Giải đáp\"} onClick={ () =>{setActivedIcon(ENUM_KIND_OF_ICONPANEL.QUESTIONS)} }></IconPanelScreen>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavbarScreen;\r\n",["482","483"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\Main\\Views\\NavDetailScreen.tsx",[],["484","485"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Detail\\Views\\PersonalDetailScreen.tsx",["486"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx",["487","488","489","490"],"import React, { useCallback, useEffect , useRef, useState } from 'react';\r\nimport CurrentChatScreen from '../../CurrentChat/Views/CurrentChatScreen';\r\nimport GuestChatScreen from '../../GuestChat/Views/GuestChatScreen';\r\nimport { findUserById, IMessage, IUser } from '../Models/ChatList';\r\nimport LoadingSpinnerScreen from '../../../../../../libraries/Features/LoadingSpinner/Views/LoadingSpinnerScreen';\r\nimport './ChatListScreen.css';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../../../libraries/Constants/KindOfMessage';\r\nimport FileChatScreen from '../../ContextChat/FileChat/Views/FileChatScreen';\r\nimport TextChatScreen from '../../ContextChat/TextChat/Views/TextChatScreen';\r\nimport ImageChatScreen from '../../ContextChat/ImageChat/Views/ImageChatScreen';\r\nimport GroupNotiChatScreen from '../../ContextChat/GroupNotiChat/Views/GroupNotiChatScreen';\r\nimport CircleAvatarScreen from '../../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen';\r\nimport DataNotFoundScreen from '../../../../../../libraries/Features/DataNotFound/Views/DataNotFoundScreen';\r\nimport DatetimeChatScreen from '../../ContextChat/DatetimeChat/Views/DatetimeChatScreen';\r\nimport MessageFoundScreen from '../../ContextChat/MessageFound/Views/MessageFoundScreen';\r\n\r\nfunction ChatListScreen(props: any){\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [userid, setUserid] = useState<number>(1);\r\n    \r\n    const chatlistRef = useRef<HTMLInputElement>(null);\r\n    const [pageNum , setPageNum] = useState(1);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [messageList, setMessageList] = useState<IMessage[]>([]);\r\n    const [hasMore, setHasMore] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        const messageListz = props.messageList.slice(- pageNum * 10);\r\n        setMessageList(messageListz)\r\n        setHasMore(messageListz.length > 0)\r\n        setLoading(false)\r\n        setIsLoading(false)\r\n      }, [pageNum])\r\n\r\n    const observer = useRef<any>();\r\n    const lastMessageRef = useCallback(node => {\r\n        if (loading) return\r\n        if (observer.current) observer.current.disconnect()\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting && hasMore) {\r\n                setPageNum(prevPageNumber => prevPageNumber + 1)\r\n            }\r\n        })\r\n        if (node) observer.current.observe(node)\r\n    }, [loading, hasMore]);\r\n\r\n    useEffect(() =>{\r\n        if(chatlistRef.current  && pageNum <= 2){\r\n            chatlistRef.current.scrollTop = chatlistRef.current.scrollHeight;\r\n        }\r\n    })\r\n    \r\n    const showAllMessages = () =>{\r\n        if(observer.current){\r\n            observer.current.scrollTop = observer.current.scrollHeight;\r\n        }\r\n        return messageList.map((message: IMessage, index: number) =>{\r\n            if(message.isGroupNoti){\r\n                return <GroupNotiChatScreen \r\n                status={ message.groupNoti.status } \r\n                imgSrc={ message.groupNoti.imgSrc }\r\n                username={ message.groupNoti.username }\r\n                ></GroupNotiChatScreen>\r\n            } else{\r\n                const userTemp: IUser = findUserById(props.userList,message.userid);\r\n                const isCurrent: boolean = userTemp.id === userid;\r\n    \r\n                let eleChildren: JSX.Element = <div></div>;\r\n    \r\n                switch (message.kindOfMess) {\r\n                    case ENUM_KIND_OF_MESSAGE.TEXT:\r\n                        eleChildren = (\r\n                            <TextChatScreen\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></TextChatScreen>\r\n                        )\r\n    \r\n                        break;\r\n                    case ENUM_KIND_OF_MESSAGE.FILE:\r\n                        eleChildren = (\r\n                            <FileChatScreen\r\n                            isFile={ true }\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></FileChatScreen>\r\n                        )\r\n    \r\n                        break;\r\n                    case ENUM_KIND_OF_MESSAGE.IMAGE:\r\n                        eleChildren = (\r\n                            <ImageChatScreen\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></ImageChatScreen>\r\n                        )\r\n    \r\n                        break;\r\n                    case ENUM_KIND_OF_MESSAGE.LINK:\r\n                        eleChildren = (\r\n                            <FileChatScreen\r\n                            isFile={ false }\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></FileChatScreen>\r\n                        )\r\n                        break;\r\n                \r\n                    default:\r\n                        return <div></div>;\r\n                }\r\n    \r\n                if(isCurrent){\r\n                    return <CurrentChatScreen key={ index } ref={ index === 0 ? lastMessageRef : null }>\r\n                        { eleChildren }\r\n                    </CurrentChatScreen>\r\n    \r\n                } else{\r\n                    return <div ref={ index === 0 ? lastMessageRef : null } key={ index }>\r\n                        <GuestChatScreen\r\n                            id={ props.id }\r\n                            kindOfMess={ message.kindOfMess }\r\n                            user={ userTemp } \r\n                            context={ message.context }\r\n                        >\r\n                            { eleChildren }\r\n                        </GuestChatScreen>\r\n                    </div>\r\n    \r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    const showUsersHaveRead = () =>{\r\n        const useridHaveReadList = messageList[messageList.length - 1].useridHaveRead;\r\n        return <div className=\"chatlist-usersviewed\">\r\n                    {\r\n                        useridHaveReadList.map((userid:number , index:number) =>{\r\n                            if(index < 3){\r\n                                const userTemp: IUser = findUserById(props.userList,userid);\r\n                                return <CircleAvatarScreen\r\n                                    width=\"\"\r\n                                    height=\"\"\r\n                                    src={ userTemp.avatar }\r\n                                    alt={ \"\" }\r\n                                    class=\"chatlist-userhasread\"\r\n                                    isOnline={ false }\r\n                                    onClick={ null }\r\n                                ></CircleAvatarScreen>\r\n                            }\r\n                            return <></>;\r\n                        })\r\n                    }\r\n                    {\r\n                        useridHaveReadList.length > 3 && (\r\n                            <div className=\"chatlist-userhasread chatlist-moreusershaveread app-mainfont\">\r\n                                <span>\r\n                                    +\r\n                                    { useridHaveReadList.length - 3 }\r\n                                </span>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n    }\r\n\r\n    return (\r\n        <div className={ props.hasSearch ? \"chatlist-container chatlist-container--hassearch\" : \"chatlist-container\"} ref={ chatlistRef }>            \r\n            {\r\n                isLoading ? (\r\n                    <div className=\"chatlist-loader\">\r\n                        <LoadingSpinnerScreen></LoadingSpinnerScreen>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"chatlist-main\">\r\n                        {\r\n                            loading && <h3>Loading ...</h3>\r\n                        }\r\n                        {\r\n                            !props.query && showAllMessages()\r\n                        }\r\n                        {\r\n                            !props.query && <DatetimeChatScreen></DatetimeChatScreen>\r\n                        }\r\n                        {\r\n                            !props.query && showUsersHaveRead()\r\n                        }\r\n                        {\r\n                            props.query && (\r\n                                <div>\r\n                                    <MessageFoundScreen></MessageFoundScreen>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                )\r\n            }\r\n            {/* <DataNotFoundScreen isPosition={ false }></DataNotFoundScreen> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatListScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfMessage.ts",[],["491","492"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Main\\Views\\FriendListScreen.tsx",["493","494","495"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Friend\\Views\\FriendScreen.tsx",["496"],"import React from \"react\";\r\nimport \"./FriendScreen.css\";\r\nimport CircleAvatarScreen from \"../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useWindowSize } from \"../../../../../libraries/Hooks/useWindowSize\";\r\nimport { IFriend } from \"../Models/Friend\";\r\n\r\nfunction FriendScreen(props: IFriend) {\r\n  const history = useHistory();\r\n  const [width, height] = useWindowSize();\r\n\r\n  const redirectToChatDetail = () => {\r\n    let kind = \"personal\";\r\n    \r\n    history.push(`/${kind}/${props.id}`);\r\n  };\r\n\r\n  const renderUserImage = () => {\r\n    let widthAva=\"48px\";\r\n    let heightAva=\"48px\";\r\n    if (width < 768) {\r\n      widthAva=\"40px\";\r\n      heightAva=\"40px\";\r\n    }\r\n    return (\r\n      <CircleAvatarScreen\r\n        class=\"\"\r\n        width={ widthAva }\r\n        height={ heightAva }\r\n        src={props.avatar}\r\n        alt=\"avatar\"\r\n        isOnline={props.isOnline}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\"userchat-container\" }\r\n      onClick={redirectToChatDetail}\r\n    >\r\n      <div className=\"userchat-image\">\r\n        {\r\n          renderUserImage()\r\n        }\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span\r\n            className={ \"userchat-username app-mainfont userchat-unreadcontext\" }\r\n          >\r\n            {props.name}\r\n          </span>\r\n        </div>\r\n        <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess\">\r\n              {props.context}\r\n            </h3>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\LoadingSkeletons.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\SkeletonNavbarDetail\\Views\\SkeletonNavbarDetailScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Conversion.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ResponseMess.reducer.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx",["497"],"import React, { useRef , useEffect } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport './MainPopupScreen.css';\r\n\r\nconst MainPopupScreen = (props: any) =>{ \r\n  const ref = useRef<any>(null);\r\n\r\n  // const closeTooltip = () => ref.current.close();\r\n\r\n  function ClosePopupWhenScroll(ref: any) {\r\n    useEffect(() => {\r\n      document.addEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      return () => {\r\n        document.removeEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      };\r\n    }, [ref]);\r\n  }\r\n\r\n  ClosePopupWhenScroll(ref);\r\n  \r\n  return (\r\n    <Popup\r\n      ref={ref}\r\n      trigger={\r\n        props.children\r\n      }\r\n      position={['bottom left', 'bottom center']}\r\n      closeOnDocumentClick={true}\r\n      arrow={false}\r\n      repositionOnResize={true}\r\n    >\r\n        <div className=\"mainpopup-container\">\r\n            {\r\n            props.context\r\n            }\r\n        </div>\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default MainPopupScreen;",["498","499"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\IconPanel\\Views\\IconPanelScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Header\\Views\\HeaderScreen.tsx",["500"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx",["501"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Message.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx",["502"],"import React from 'react';\r\nimport CircleAvatarScreen from '../../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen';\r\nimport IconImageScreen from '../../../../../../libraries/Features/IconImage/Views/IconImageScreen';\r\nimport { IGuessChat } from '../Models/GuessChat';\r\nimport './GuestChatScreen.css';\r\nimport { connect } from \"react-redux\";\r\nimport { setResponseMess } from \"../../../../../../redux/Actions/ResponseMess.action\";\r\nimport MainPopupScreen from '../../../../../../libraries/Features/Popup/MainPopup/Views/MainPopupScreen';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../../../libraries/Constants/KindOfMessage';\r\nimport DetailPopupScreen from '../../../../../../libraries/Features/Popup/DetailPopup/Views/DetailPopupScreen';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nconst iconhorizontal3dots = require('../../../../../../libraries/Icons/iconhorizontal3dots.svg').default;\r\nconst iconreplay = require('./Icons/iconreplay.svg').default;\r\nconst iconcopy = require('./Icons/iconcopy.svg').default;\r\nconst icontrash = require('../../../../../../libraries/Icons/icontrash.svg').default;\r\n\r\nfunction GuestChatScreen(props : IGuessChat){\r\n    const history = useHistory();\r\n\r\n    const listEles = [\r\n        {\r\n            onClick: () => props.setResponseMess(props.user.name , props.context , props.kindOfMess),\r\n            icon: iconreplay,\r\n            text: \"Trả lời\"\r\n        },\r\n        {\r\n            onClick: () => props.kindOfMess === ENUM_KIND_OF_MESSAGE.TEXT && navigator.clipboard.writeText(props.context),\r\n            icon: iconcopy,\r\n            text: \"Sao chép\"\r\n        },\r\n        {\r\n            onClick: null,\r\n            icon: icontrash,\r\n            text: \"Xóa\"\r\n        },\r\n    ];\r\n\r\n    const redirectToDetailUser = () =>{\r\n        history.push(\"/personal/detail/\" + props.id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"guestchat-container\">\r\n            <CircleAvatarScreen\r\n            width=\"30px\"\r\n            height=\"30px\"\r\n            src={ props.user.avatar }\r\n            alt={ props.user.name }\r\n            class=\"guestchat-left\"\r\n            isOnline={ false }\r\n            onClick={ redirectToDetailUser }\r\n            ></CircleAvatarScreen>\r\n            <div className=\"guestchat-right\">\r\n                <p className=\"app-mainfont\">\r\n                    { props.user.name }\r\n                </p>\r\n                <div className=\"guestchat-maincontext\">\r\n                    { props.children }\r\n                    <MainPopupScreen context={ <DetailPopupScreen listEles={ listEles }></DetailPopupScreen> }> \r\n                        <div className=\"guestchat-icon-horizontal3dots\">\r\n                            <IconImageScreen src={ iconhorizontal3dots } alt=\"horizontal 3 dots\" class={\"\"}></IconImageScreen>\r\n                        </div>\r\n                    </MainPopupScreen>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        responseMess: state.responseMess,\r\n    }\r\n}\r\n  \r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        setResponseMess: (name:string , context: string , kindOfMess: number) => dispatch(setResponseMess(name , context , kindOfMess)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestChatScreen)","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\UploadImage\\Views\\UploadImageScreen.tsx",["503"],"import React from 'react';\r\nimport './UploadImageScreen.css';\r\n\r\nconst icondelete = require(\"../../../../../../libraries/Icons/icondelete.svg\").default;\r\n\r\nfunction UploadImageScreen(props: any) {\r\n  return (\r\n    <div \r\n    className={\"uploadimage-container \" + props.class} \r\n    style={{ backgroundImage : `url(${ props.pathFile })` , width: props.width , height: props.height}}\r\n    onClick={ () =>{ props.removePathFile(props.pathFile) }}\r\n    >\r\n        <div className=\"uploadimage-icon-delete-panel\">\r\n            <img src={ icondelete }></img>\r\n        </div>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default UploadImageScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Functions\\BuildFileSelector.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\Main\\Views\\ChatInputScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfIconPanel.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx",["504"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\DatetimeChat\\Views\\DatetimeChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\store.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Body\\Views\\BodyCreateGroupScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Modal\\Views\\ModalScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Main\\Views\\CreateGroupScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomBadge\\Views\\CustomBadgeScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\BodyPanel\\Views\\BodyPanelScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Models\\ChatList.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Body\\Views\\BodyConversationDetailScreen.tsx",["505","506","507"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\ResponseMess.action.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Functions\\DecodeHTML.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Detail\\Views\\GroupDetailScreen.tsx",["508"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Header\\Views\\HeaderConversationDetailScreen.tsx",["509","510"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\CurrentChat\\Views\\CurrentChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Views\\MessageFoundScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Models\\MessageFound.ts",["511"],"export function findQueryInMessage(query: string , message: string){\r\n    const index = message.indexOf(query);\r\n    console.log(message.split(\"\"));\r\n    return [];\r\n}","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\ResponseMess.type.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ConversationList.reducer.ts",["512","513","514","515","516","517"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\App.tsx",["518","519","520","521","522"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\redux\\Stores\\Configure.ts",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\CustomButton\\Views\\CustomButtonScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfConversation.ts",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderUserChatListScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Noti\\Models\\Notification.ts",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\redux\\Actions\\ResponseMess.action.ts",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx",["523","524","525","526"],"import React, { useCallback, useEffect , useRef, useState } from 'react';\r\nimport CurrentChatScreen from '../../CurrentChat/Views/CurrentChatScreen';\r\nimport GuestChatScreen from '../../GuestChat/Views/GuestChatScreen';\r\nimport { findUserById, IMessage, IUser } from '../Models/ChatList';\r\nimport LoadingSpinnerScreen from '../../../../../../libraries/Features/LoadingSpinner/Views/LoadingSpinnerScreen';\r\nimport './ChatListScreen.css';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../../../libraries/Constants/KindOfMessage';\r\nimport FileChatScreen from '../../ContextChat/FileChat/Views/FileChatScreen';\r\nimport TextChatScreen from '../../ContextChat/TextChat/Views/TextChatScreen';\r\nimport ImageChatScreen from '../../ContextChat/ImageChat/Views/ImageChatScreen';\r\nimport GroupNotiChatScreen from '../../ContextChat/GroupNotiChat/Views/GroupNotiChatScreen';\r\nimport CircleAvatarScreen from '../../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen';\r\nimport DataNotFoundScreen from '../../../../../../libraries/Features/DataNotFound/Views/DataNotFoundScreen';\r\nimport DatetimeChatScreen from '../../ContextChat/DatetimeChat/Views/DatetimeChatScreen';\r\n\r\nfunction ChatListScreen(props: any){\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [userid, setUserid] = useState<number>(1);\r\n    \r\n    const chatlistRef = useRef<HTMLInputElement>(null);\r\n    const [pageNum , setPageNum] = useState(1);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [messageList, setMessageList] = useState<IMessage[]>([]);\r\n    const [hasMore, setHasMore] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        const messageListz = props.messageList.slice(- pageNum * 10);\r\n        setMessageList(messageListz)\r\n        setHasMore(messageListz.length > 0)\r\n        setLoading(false)\r\n        setIsLoading(false)\r\n      }, [pageNum])\r\n\r\n    const observer = useRef<any>();\r\n    const lastMessageRef = useCallback(node => {\r\n        if (loading) return\r\n        if (observer.current) observer.current.disconnect()\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting && hasMore) {\r\n                setPageNum(prevPageNumber => prevPageNumber + 1)\r\n            }\r\n        })\r\n        if (node) observer.current.observe(node)\r\n    }, [loading, hasMore]);\r\n\r\n    useEffect(() =>{\r\n        if(chatlistRef.current  && pageNum <= 2){\r\n            chatlistRef.current.scrollTop = chatlistRef.current.scrollHeight;\r\n        }\r\n    })\r\n    \r\n    const showAllMessages = () =>{\r\n        if(observer.current){\r\n            observer.current.scrollTop = observer.current.scrollHeight;\r\n        }\r\n        return messageList.map((message: IMessage, index: number) =>{\r\n            if(message.isGroupNoti){\r\n                return <GroupNotiChatScreen \r\n                status={ message.groupNoti.status } \r\n                imgSrc={ message.groupNoti.imgSrc }\r\n                username={ message.groupNoti.username }\r\n                ></GroupNotiChatScreen>\r\n            } else{\r\n                const userTemp: IUser = findUserById(props.userList,message.userid);\r\n                const isCurrent: boolean = userTemp.id === userid;\r\n    \r\n                let eleChildren: JSX.Element = <div></div>;\r\n    \r\n                switch (message.kindOfMess) {\r\n                    case ENUM_KIND_OF_MESSAGE.TEXT:\r\n                        eleChildren = (\r\n                            <TextChatScreen\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></TextChatScreen>\r\n                        )\r\n    \r\n                        break;\r\n                    case ENUM_KIND_OF_MESSAGE.FILE:\r\n                        eleChildren = (\r\n                            <FileChatScreen\r\n                            isFile={ true }\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></FileChatScreen>\r\n                        )\r\n    \r\n                        break;\r\n                    case ENUM_KIND_OF_MESSAGE.IMAGE:\r\n                        eleChildren = (\r\n                            <ImageChatScreen\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></ImageChatScreen>\r\n                        )\r\n    \r\n                        break;\r\n                    case ENUM_KIND_OF_MESSAGE.LINK:\r\n                        eleChildren = (\r\n                            <FileChatScreen\r\n                            isFile={ false }\r\n                            isCurrent={ isCurrent }\r\n                            context={ message.context }\r\n                            datetime={ message.datetime }\r\n                            ></FileChatScreen>\r\n                        )\r\n                        break;\r\n                \r\n                    default:\r\n                        return <div></div>;\r\n                }\r\n    \r\n                if(isCurrent){\r\n                    return <CurrentChatScreen key={ index } ref={ index === 0 ? lastMessageRef : null }>\r\n                        { eleChildren }\r\n                    </CurrentChatScreen>\r\n    \r\n                } else{\r\n                    return <div ref={ index === 0 ? lastMessageRef : null } key={ index }>\r\n                        <GuestChatScreen\r\n                            id={ props.id }\r\n                            kindOfMess={ message.kindOfMess }\r\n                            user={ userTemp } \r\n                            context={ message.context }\r\n                        >\r\n                            { eleChildren }\r\n                        </GuestChatScreen>\r\n                    </div>\r\n    \r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    const showUsersHaveRead = () =>{\r\n        const useridHaveReadList = messageList[messageList.length - 1].useridHaveRead;\r\n        return <div className=\"chatlist-usersviewed\">\r\n                    {\r\n                        useridHaveReadList.map((userid:number , index:number) =>{\r\n                            if(index < 3){\r\n                                const userTemp: IUser = findUserById(props.userList,userid);\r\n                                return <CircleAvatarScreen\r\n                                    width=\"\"\r\n                                    height=\"\"\r\n                                    src={ userTemp.avatar }\r\n                                    alt={ \"\" }\r\n                                    class=\"chatlist-userhasread\"\r\n                                    isOnline={ false }\r\n                                    onClick={ null }\r\n                                ></CircleAvatarScreen>\r\n                            }\r\n                            return <></>;\r\n                        })\r\n                    }\r\n                    {\r\n                        useridHaveReadList.length > 3 && (\r\n                            <div className=\"chatlist-userhasread chatlist-moreusershaveread app-mainfont\">\r\n                                <span>\r\n                                    +\r\n                                    { useridHaveReadList.length - 3 }\r\n                                </span>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n    }\r\n\r\n    return (\r\n        <div className={ props.hasSearch ? \"chatlist-container chatlist-container--hassearch\" : \"chatlist-container\"} ref={ chatlistRef }>            \r\n            {\r\n                isLoading ? (\r\n                    <div className=\"chatlist-loader\">\r\n                        <LoadingSpinnerScreen></LoadingSpinnerScreen>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"chatlist-main\">\r\n                        {\r\n                            loading && <h3>Loading ...</h3>\r\n                        }\r\n                        {\r\n                            showAllMessages()\r\n                        }\r\n                        {\r\n                            <DatetimeChatScreen></DatetimeChatScreen>\r\n                        }\r\n                        {\r\n                            showUsersHaveRead()\r\n                        }\r\n                    </div>\r\n\r\n                )\r\n            }\r\n            {/* <DataNotFoundScreen isPosition={ false }></DataNotFoundScreen> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatListScreen;\r\n","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx",["527"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Views\\MessageFoundScreen.tsx",["528"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\MessageFound\\Models\\MessageFound.ts",["529"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\SearchChat\\Views\\SearchChatScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["530"],"import React from \"react\";\r\nimport \"./UserChatScreen.css\";\r\nimport CircleAvatarScreen from \"../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen\";\r\nimport { IConversationState } from \"../../../../../redux/Reducers/ConversationList.reducer\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CustomBadgeScreen from \"../../../../../libraries/Features/CustomBadge/Views/CustomBadgeScreen\";\r\nimport { useWindowSize } from \"../../../../../libraries/Hooks/useWindowSize\";\r\n\r\nconst iconunread = require(\"./Icons/iconunread.svg\").default;\r\n\r\nfunction UserChatScreen(props: IConversationState) {\r\n  const history = useHistory();\r\n  const [width, height] = useWindowSize();\r\n\r\n  const redirectToChatDetail = () => {\r\n    let kind = \"personal\";\r\n    if (props.isGroup) {\r\n      kind = \"group\";\r\n    }\r\n    history.push(`/${kind}/${props.id}`);\r\n\r\n    props.setIsActive(props.isGroup, props.id);\r\n  };\r\n\r\n  const renderUserImage = () => {\r\n    let widthAva=\"48px\";\r\n    let heightAva=\"48px\";\r\n    if (width < 768) {\r\n      widthAva=\"40px\";\r\n      heightAva=\"40px\";\r\n    }\r\n    return (\r\n      <CircleAvatarScreen\r\n        class=\"\"\r\n        width={ widthAva }\r\n        height={ heightAva }\r\n        src={props.avatar}\r\n        alt=\"avatar\"\r\n        isOnline={props.isOnline}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        props.isActive\r\n          ? \"userchat-container userchat-container-active\"\r\n          : \"userchat-container\"\r\n      }\r\n      onClick={redirectToChatDetail}\r\n    >\r\n      <div className=\"userchat-image\">\r\n        {\r\n          renderUserImage()\r\n        }\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span\r\n            className={\r\n              props.hasReadLastMess\r\n                ? \"userchat-username app-mainfont\"\r\n                : \"userchat-username app-mainfont userchat-unreadcontext\"\r\n            }\r\n          >\r\n            {props.name}\r\n          </span>\r\n          {props.isGroup && (\r\n            <CustomBadgeScreen\r\n              text=\"Nhóm\"\r\n              class=\"userchat-groupchat\"\r\n            ></CustomBadgeScreen>\r\n          )}\r\n          <span className=\"userchat-timeoflastmess app-mainfont\">\r\n            {props.timeToReadLastMess}\r\n          </span>\r\n        </div>\r\n        {props.hasReadLastMess ? (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h4 className=\"userchat-contextoflastmess\">{ props.lastMess }</h4>\r\n          </div>\r\n        ) : (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h4 className=\"userchat-contextoflastmess userchat-unreadcontext\">\r\n              {props.lastMess}\r\n            </h4>\r\n            <img src={iconunread} className=\"userchat-icon-unread\" alt=\"\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserChatScreen;\r\n","D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\NotiList\\Main\\Views\\NotificationListScreen.tsx",["531","532"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Main\\Views\\FriendListScreen.tsx",["533","534","535"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\FriendList\\Friend\\Views\\FriendScreen.tsx",["536"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx",["537","538","539","540"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx",[],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\UploadImage\\Views\\UploadImageScreen.tsx",["541"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx",["542"],"D:\\Coding\\Work\\ver9\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Models\\ChatList.ts",[],{"ruleId":"543","severity":1,"message":"544","line":2,"column":10,"nodeType":"545","messageId":"546","endLine":2,"endColumn":30},{"ruleId":"547","replacedBy":"548"},{"ruleId":"549","replacedBy":"550"},{"ruleId":"547","replacedBy":"551"},{"ruleId":"549","replacedBy":"552"},{"ruleId":"543","severity":1,"message":"553","line":82,"column":10,"nodeType":"545","messageId":"546","endLine":82,"endColumn":15},{"ruleId":"554","severity":1,"message":"555","line":94,"column":5,"nodeType":"556","endLine":94,"endColumn":7,"suggestions":"557"},{"ruleId":"547","replacedBy":"558"},{"ruleId":"549","replacedBy":"559"},{"ruleId":"547","replacedBy":"560"},{"ruleId":"549","replacedBy":"561"},{"ruleId":"554","severity":1,"message":"562","line":38,"column":7,"nodeType":"556","endLine":38,"endColumn":9,"suggestions":"563"},{"ruleId":"543","severity":1,"message":"564","line":2,"column":10,"nodeType":"545","messageId":"546","endLine":2,"endColumn":19},{"ruleId":"547","replacedBy":"565"},{"ruleId":"549","replacedBy":"566"},{"ruleId":"547","replacedBy":"567"},{"ruleId":"549","replacedBy":"568"},{"ruleId":"543","severity":1,"message":"569","line":5,"column":19,"nodeType":"545","messageId":"546","endLine":5,"endColumn":32},{"ruleId":"543","severity":1,"message":"570","line":5,"column":34,"nodeType":"545","messageId":"546","endLine":5,"endColumn":40},{"ruleId":"543","severity":1,"message":"571","line":5,"column":42,"nodeType":"545","messageId":"546","endLine":5,"endColumn":46},{"ruleId":"543","severity":1,"message":"572","line":5,"column":48,"nodeType":"545","messageId":"546","endLine":5,"endColumn":60},{"ruleId":"543","severity":1,"message":"573","line":81,"column":21,"nodeType":"545","messageId":"546","endLine":81,"endColumn":32},{"ruleId":"547","replacedBy":"574"},{"ruleId":"549","replacedBy":"575"},{"ruleId":"543","severity":1,"message":"576","line":13,"column":17,"nodeType":"545","messageId":"546","endLine":13,"endColumn":23},{"ruleId":"543","severity":1,"message":"576","line":15,"column":19,"nodeType":"545","messageId":"546","endLine":15,"endColumn":25},{"ruleId":"547","replacedBy":"577"},{"ruleId":"549","replacedBy":"578"},{"ruleId":"547","replacedBy":"579"},{"ruleId":"549","replacedBy":"580"},{"ruleId":"547","replacedBy":"581"},{"ruleId":"549","replacedBy":"582"},{"ruleId":"543","severity":1,"message":"583","line":1,"column":17,"nodeType":"545","messageId":"546","endLine":1,"endColumn":25},{"ruleId":"543","severity":1,"message":"584","line":3,"column":8,"nodeType":"545","messageId":"546","endLine":3,"endColumn":19},{"ruleId":"543","severity":1,"message":"585","line":4,"column":8,"nodeType":"545","messageId":"546","endLine":4,"endColumn":26},{"ruleId":"543","severity":1,"message":"586","line":11,"column":7,"nodeType":"545","messageId":"546","endLine":11,"endColumn":20},{"ruleId":"547","replacedBy":"587"},{"ruleId":"549","replacedBy":"588"},{"ruleId":"547","replacedBy":"589"},{"ruleId":"549","replacedBy":"590"},{"ruleId":"543","severity":1,"message":"564","line":2,"column":10,"nodeType":"545","messageId":"546","endLine":2,"endColumn":19},{"ruleId":"543","severity":1,"message":"591","line":13,"column":8,"nodeType":"545","messageId":"546","endLine":13,"endColumn":26},{"ruleId":"543","severity":1,"message":"592","line":19,"column":20,"nodeType":"545","messageId":"546","endLine":19,"endColumn":29},{"ruleId":"543","severity":1,"message":"593","line":24,"column":12,"nodeType":"545","messageId":"546","endLine":24,"endColumn":17},{"ruleId":"554","severity":1,"message":"594","line":38,"column":10,"nodeType":"556","endLine":38,"endColumn":19,"suggestions":"595"},{"ruleId":"547","replacedBy":"596"},{"ruleId":"549","replacedBy":"597"},{"ruleId":"543","severity":1,"message":"598","line":3,"column":10,"nodeType":"545","messageId":"546","endLine":3,"endColumn":35},{"ruleId":"543","severity":1,"message":"591","line":5,"column":8,"nodeType":"545","messageId":"546","endLine":5,"endColumn":26},{"ruleId":"543","severity":1,"message":"553","line":256,"column":12,"nodeType":"545","messageId":"546","endLine":256,"endColumn":17},{"ruleId":"543","severity":1,"message":"576","line":10,"column":17,"nodeType":"545","messageId":"546","endLine":10,"endColumn":23},{"ruleId":"554","severity":1,"message":"599","line":14,"column":71,"nodeType":"545","endLine":14,"endColumn":78},{"ruleId":"547","replacedBy":"600"},{"ruleId":"549","replacedBy":"601"},{"ruleId":"554","severity":1,"message":"602","line":26,"column":6,"nodeType":"556","endLine":26,"endColumn":8,"suggestions":"603"},{"ruleId":"543","severity":1,"message":"604","line":16,"column":10,"nodeType":"545","messageId":"546","endLine":16,"endColumn":15},{"ruleId":"543","severity":1,"message":"564","line":11,"column":22,"nodeType":"545","messageId":"546","endLine":11,"endColumn":31},{"ruleId":"605","severity":1,"message":"606","line":14,"column":13,"nodeType":"607","endLine":14,"endColumn":37},{"ruleId":"608","severity":1,"message":"609","line":10,"column":20,"nodeType":"607","endLine":10,"endColumn":65},{"ruleId":"543","severity":1,"message":"583","line":1,"column":17,"nodeType":"545","messageId":"546","endLine":1,"endColumn":25},{"ruleId":"543","severity":1,"message":"544","line":2,"column":10,"nodeType":"545","messageId":"546","endLine":2,"endColumn":30},{"ruleId":"543","severity":1,"message":"610","line":4,"column":8,"nodeType":"545","messageId":"546","endLine":4,"endColumn":22},{"ruleId":"543","severity":1,"message":"564","line":2,"column":10,"nodeType":"545","messageId":"546","endLine":2,"endColumn":19},{"ruleId":"543","severity":1,"message":"611","line":4,"column":8,"nodeType":"545","messageId":"546","endLine":4,"endColumn":23},{"ruleId":"543","severity":1,"message":"612","line":12,"column":9,"nodeType":"545","messageId":"546","endLine":12,"endColumn":11},{"ruleId":"543","severity":1,"message":"613","line":2,"column":11,"nodeType":"545","messageId":"546","endLine":2,"endColumn":16},{"ruleId":"614","severity":1,"message":"615","line":30,"column":98,"nodeType":"616","messageId":"617","endLine":30,"endColumn":100},{"ruleId":"614","severity":1,"message":"618","line":37,"column":83,"nodeType":"616","messageId":"617","endLine":37,"endColumn":85},{"ruleId":"614","severity":1,"message":"619","line":47,"column":78,"nodeType":"616","messageId":"617","endLine":47,"endColumn":80},{"ruleId":"614","severity":1,"message":"615","line":71,"column":132,"nodeType":"616","messageId":"617","endLine":71,"endColumn":134},{"ruleId":"614","severity":1,"message":"618","line":78,"column":103,"nodeType":"616","messageId":"617","endLine":78,"endColumn":105},{"ruleId":"614","severity":1,"message":"619","line":91,"column":85,"nodeType":"616","messageId":"617","endLine":91,"endColumn":87},{"ruleId":"543","severity":1,"message":"569","line":5,"column":19,"nodeType":"545","messageId":"546","endLine":5,"endColumn":32},{"ruleId":"543","severity":1,"message":"570","line":5,"column":34,"nodeType":"545","messageId":"546","endLine":5,"endColumn":40},{"ruleId":"543","severity":1,"message":"571","line":5,"column":42,"nodeType":"545","messageId":"546","endLine":5,"endColumn":46},{"ruleId":"543","severity":1,"message":"572","line":5,"column":48,"nodeType":"545","messageId":"546","endLine":5,"endColumn":60},{"ruleId":"543","severity":1,"message":"573","line":81,"column":21,"nodeType":"545","messageId":"546","endLine":81,"endColumn":32},{"ruleId":"543","severity":1,"message":"591","line":13,"column":8,"nodeType":"545","messageId":"546","endLine":13,"endColumn":26},{"ruleId":"543","severity":1,"message":"592","line":18,"column":20,"nodeType":"545","messageId":"546","endLine":18,"endColumn":29},{"ruleId":"543","severity":1,"message":"593","line":23,"column":12,"nodeType":"545","messageId":"546","endLine":23,"endColumn":17},{"ruleId":"554","severity":1,"message":"594","line":37,"column":10,"nodeType":"556","endLine":37,"endColumn":19,"suggestions":"620"},{"ruleId":"543","severity":1,"message":"564","line":11,"column":22,"nodeType":"545","messageId":"546","endLine":11,"endColumn":31},{"ruleId":"543","severity":1,"message":"621","line":3,"column":10,"nodeType":"545","messageId":"546","endLine":3,"endColumn":28},{"ruleId":"543","severity":1,"message":"613","line":2,"column":11,"nodeType":"545","messageId":"546","endLine":2,"endColumn":16},{"ruleId":"543","severity":1,"message":"576","line":13,"column":17,"nodeType":"545","messageId":"546","endLine":13,"endColumn":23},{"ruleId":"543","severity":1,"message":"598","line":3,"column":10,"nodeType":"545","messageId":"546","endLine":3,"endColumn":35},{"ruleId":"543","severity":1,"message":"591","line":4,"column":8,"nodeType":"545","messageId":"546","endLine":4,"endColumn":26},{"ruleId":"543","severity":1,"message":"598","line":3,"column":10,"nodeType":"545","messageId":"546","endLine":3,"endColumn":35},{"ruleId":"543","severity":1,"message":"591","line":5,"column":8,"nodeType":"545","messageId":"546","endLine":5,"endColumn":26},{"ruleId":"543","severity":1,"message":"553","line":253,"column":12,"nodeType":"545","messageId":"546","endLine":253,"endColumn":17},{"ruleId":"543","severity":1,"message":"576","line":10,"column":17,"nodeType":"545","messageId":"546","endLine":10,"endColumn":23},{"ruleId":"543","severity":1,"message":"591","line":11,"column":8,"nodeType":"545","messageId":"546","endLine":11,"endColumn":26},{"ruleId":"543","severity":1,"message":"598","line":12,"column":10,"nodeType":"545","messageId":"546","endLine":12,"endColumn":35},{"ruleId":"543","severity":1,"message":"553","line":85,"column":10,"nodeType":"545","messageId":"546","endLine":85,"endColumn":15},{"ruleId":"554","severity":1,"message":"555","line":109,"column":5,"nodeType":"556","endLine":109,"endColumn":7,"suggestions":"622"},{"ruleId":"605","severity":1,"message":"606","line":14,"column":13,"nodeType":"607","endLine":14,"endColumn":37},{"ruleId":"608","severity":1,"message":"609","line":10,"column":20,"nodeType":"607","endLine":10,"endColumn":65},"@typescript-eslint/no-unused-vars","'ENUM_KIND_OF_MESSAGE' is defined but never used.","Identifier","unusedVar","no-native-reassign",["623"],"no-negated-in-lhs",["624"],["623"],["624"],"'query' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'setUserChatIsAcTiveByPath'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["625"],["623"],["624"],["623"],["624"],"React Hook useEffect has a missing dependency: 'mainMiniImage.index'. Either include it or remove the dependency array.",["626"],"'useParams' is defined but never used.",["623"],["624"],["623"],["624"],"'CallBackProps' is defined but never used.","'STATUS' is defined but never used.","'Step' is defined but never used.","'StoreHelpers' is defined but never used.","'setHasModal' is assigned a value but never used.",["623"],["624"],"'height' is assigned a value but never used.",["623"],["624"],["623"],["624"],["623"],["624"],"'useState' is defined but never used.","'ModalScreen' is defined but never used.","'ToggleSwitchScreen' is defined but never used.","'iconbrownnoti' is assigned a value but never used.",["623"],["624"],["623"],["624"],"'DataNotFoundScreen' is defined but never used.","'setUserid' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.messageList'. Either include it or remove the dependency array.",["627"],["623"],["624"],"'ENUM_KIND_OF_NOTFOUNDICON' is defined but never used.","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.",["623"],["624"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["628"],"'width' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'FileChatScreen' is defined but never used.","'IconCirclePanel' is defined but never used.","'id' is assigned a value but never used.","'index' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.some() expects a value to be returned at the end of arrow function.",["629"],"'findQueryInMessage' is defined but never used.",["630"],"no-global-assign","no-unsafe-negation",{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"635","fix":"639"},{"desc":"631","fix":"640"},"Update the dependencies array to be: [props, setUserChatIsAcTiveByPath]",{"range":"641","text":"642"},"Update the dependencies array to be: [mainMiniImage.index]",{"range":"643","text":"644"},"Update the dependencies array to be: [pageNum, props.messageList]",{"range":"645","text":"646"},"Update the dependencies array to be: [props]",{"range":"647","text":"648"},{"range":"649","text":"646"},{"range":"650","text":"642"},[3877,3879],"[props, setUserChatIsAcTiveByPath]",[1352,1354],"[mainMiniImage.index]",[2085,2094],"[pageNum, props.messageList]",[1144,1146],"[props]",[1994,2003],[4455,4457]]