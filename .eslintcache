[{"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts":"1","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx":"2","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfGroupNotiChat.ts":"3","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx":"4","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\store.ts":"5","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx":"6","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\ConversationList.type.ts":"7","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfConversation.ts":"8","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts":"9","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Models\\ChatList.ts":"10","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Conversation\\Views\\GroupConversationScreen.tsx":"11","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx":"12","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx":"13","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Main\\Views\\ChatDetailScreen.tsx":"14","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts":"15","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts":"16","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx":"17","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx":"18","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts":"19","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx":"20","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx":"21","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx":"22","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx":"23","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx":"24","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\Main\\Views\\NavbarScreen.tsx":"25","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Message.database.ts":"26","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ResponseMess.reducer.ts":"27","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\CurrentChat\\Views\\CurrentChatScreen.tsx":"28","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx":"29","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx":"30","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx":"31","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx":"32","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Body\\Views\\BodyCreateGroupScreen.tsx":"33","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Header\\Views\\HeaderCreateGroupScreen.tsx":"34","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx":"35","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\NoChat\\Views\\NoChatScreen.tsx":"36","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\IconPanel\\Views\\IconPanelScreen.tsx":"37","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\App.tsx":"38","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx":"39","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx":"40","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\ConversationList.action.ts":"41","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"42","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderScreen.tsx":"43","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\User.database.ts":"44","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfIconPanel.ts":"45"},{"size":441,"mtime":1610094168719,"results":"46","hashOfConfig":"47"},{"size":1981,"mtime":1610362292754,"results":"48","hashOfConfig":"47"},{"size":106,"mtime":1610362001829,"results":"49","hashOfConfig":"47"},{"size":8545,"mtime":1610436364246,"results":"50","hashOfConfig":"47"},{"size":238,"mtime":1610072974205,"results":"51","hashOfConfig":"47"},{"size":1002,"mtime":1610072974195,"results":"52","hashOfConfig":"47"},{"size":59,"mtime":1610072974205,"results":"53","hashOfConfig":"47"},{"size":91,"mtime":1610072974183,"results":"54","hashOfConfig":"47"},{"size":229,"mtime":1610072974202,"results":"55","hashOfConfig":"47"},{"size":1130,"mtime":1610418695363,"results":"56","hashOfConfig":"47"},{"size":19589,"mtime":1610427050719,"results":"57","hashOfConfig":"47"},{"size":281,"mtime":1610072974182,"results":"58","hashOfConfig":"47"},{"size":1080,"mtime":1610072974184,"results":"59","hashOfConfig":"47"},{"size":1597,"mtime":1610072974174,"results":"60","hashOfConfig":"47"},{"size":790,"mtime":1610072974206,"results":"61","hashOfConfig":"47"},{"size":53,"mtime":1610072974205,"results":"62","hashOfConfig":"47"},{"size":1081,"mtime":1610072974194,"results":"63","hashOfConfig":"47"},{"size":17120,"mtime":1610427062977,"results":"64","hashOfConfig":"47"},{"size":258,"mtime":1610072974159,"results":"65","hashOfConfig":"47"},{"size":212,"mtime":1610072974192,"results":"66","hashOfConfig":"47"},{"size":687,"mtime":1610072974159,"results":"67","hashOfConfig":"47"},{"size":3361,"mtime":1610072974162,"results":"68","hashOfConfig":"47"},{"size":539,"mtime":1610072974160,"results":"69","hashOfConfig":"47"},{"size":390,"mtime":1610072974189,"results":"70","hashOfConfig":"47"},{"size":2647,"mtime":1610440794849,"results":"71","hashOfConfig":"47"},{"size":6338,"mtime":1610072974206,"results":"72","hashOfConfig":"47"},{"size":884,"mtime":1610072974204,"results":"73","hashOfConfig":"47"},{"size":582,"mtime":1610072974161,"results":"74","hashOfConfig":"47"},{"size":3057,"mtime":1610427485124,"results":"75","hashOfConfig":"47"},{"size":1227,"mtime":1610427021758,"results":"76","hashOfConfig":"47"},{"size":1771,"mtime":1610428637124,"results":"77","hashOfConfig":"47"},{"size":10654,"mtime":1610428595865,"results":"78","hashOfConfig":"47"},{"size":9393,"mtime":1610428609738,"results":"79","hashOfConfig":"47"},{"size":3199,"mtime":1610428622703,"results":"80","hashOfConfig":"47"},{"size":604,"mtime":1610436246944,"results":"81","hashOfConfig":"47"},{"size":410,"mtime":1610436329402,"results":"82","hashOfConfig":"47"},{"size":880,"mtime":1610440220041,"results":"83","hashOfConfig":"47"},{"size":571,"mtime":1610440620627,"results":"84","hashOfConfig":"47"},{"size":1629,"mtime":1610441370550,"results":"85","hashOfConfig":"47"},{"size":6666,"mtime":1610444493676,"results":"86","hashOfConfig":"47"},{"size":261,"mtime":1610072974202,"results":"87","hashOfConfig":"47"},{"size":3318,"mtime":1610444450297,"results":"88","hashOfConfig":"47"},{"size":776,"mtime":1610444480076,"results":"89","hashOfConfig":"47"},{"size":2246,"mtime":1610072974207,"results":"90","hashOfConfig":"47"},{"size":106,"mtime":1610439959979,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1un77o0",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts",[],["190","191"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\GroupNotiChat\\Views\\GroupNotiChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfGroupNotiChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx",["192","193","194","195"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\store.ts",[],["196","197"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx",["198"],"import React, { useRef , useEffect } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport './MainPopupScreen.css';\r\n\r\nconst MainPopupScreen = (props: any) =>{ \r\n  const ref = useRef<any>(null);\r\n\r\n  // const closeTooltip = () => ref.current.close();\r\n\r\n  function ClosePopupWhenScroll(ref: any) {\r\n    useEffect(() => {\r\n      document.addEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      return () => {\r\n        document.removeEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      };\r\n    }, [ref]);\r\n  }\r\n\r\n  ClosePopupWhenScroll(ref);\r\n  \r\n  return (\r\n    <Popup\r\n      ref={ref}\r\n      trigger={\r\n        props.children\r\n      }\r\n      position={['bottom left', 'bottom center']}\r\n      closeOnDocumentClick={true}\r\n      arrow={false}\r\n      repositionOnResize={true}\r\n    >\r\n        <div className=\"mainpopup-container\">\r\n            {\r\n            props.context\r\n            }\r\n        </div>\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default MainPopupScreen;",["199","200"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\ConversationList.type.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfConversation.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Models\\ChatList.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Conversation\\Views\\GroupConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Main\\Views\\ChatDetailScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx",["201"],"import React from 'react';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../Constants/KindOfMessage';\r\nimport IconImageScreen from '../../../IconImage/Views/IconImageScreen';\r\nimport './DetailPopupScreen.css';\r\n\r\nfunction DetailPopupScreen(props : any){\r\n    const { listEles , eleHeader } = props;\r\n    const showDetailPopup = () =>{\r\n        return listEles.map((ele:any , index:number) =>{\r\n            return (\r\n                <li onClick={ ele.onClick }>\r\n                    <IconImageScreen src={ ele.icon } alt=\"replay\" class={\"\"}></IconImageScreen>\r\n                    <span className=\"app-mainfont\">\r\n                        { ele.text }\r\n                    </span>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"detailpopup-container\">\r\n            {\r\n                eleHeader && eleHeader\r\n            }\r\n            <ul className=\"detailpopup-detail\">\r\n                {\r\n                    showDetailPopup()\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DetailPopupScreen;","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx",["202"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx",["203"],"import React from 'react';\r\nimport CircleAvatarScreen from '../../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen';\r\nimport IconImageScreen from '../../../../../../libraries/Features/IconImage/Views/IconImageScreen';\r\nimport { IGuessChat } from '../Models/GuessChat';\r\nimport './GuestChatScreen.css';\r\nimport { connect } from \"react-redux\";\r\nimport { setResponseMess } from \"../../../../../../redux/Actions/ResponseMess.action\";\r\nimport MainPopupScreen from '../../../../../../libraries/Features/Popup/MainPopup/Views/MainPopupScreen';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../../../libraries/Constants/KindOfMessage';\r\nimport DetailPopupScreen from '../../../../../../libraries/Features/Popup/DetailPopup/Views/DetailPopupScreen';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nconst iconhorizontal3dots = require('../../../../../../libraries/Icons/iconhorizontal3dots.svg').default;\r\nconst iconreplay = require('./Icons/iconreplay.svg').default;\r\nconst iconcopy = require('./Icons/iconcopy.svg').default;\r\nconst icontrash = require('../../../../../../libraries/Icons/icontrash.svg').default;\r\n\r\nfunction GuestChatScreen(props : IGuessChat){\r\n    const history = useHistory();\r\n\r\n    const listEles = [\r\n        {\r\n            onClick: () => props.setResponseMess(props.user.name , props.context , props.kindOfMess),\r\n            icon: iconreplay,\r\n            text: \"Trả lời\"\r\n        },\r\n        {\r\n            onClick: () => props.kindOfMess === ENUM_KIND_OF_MESSAGE.TEXT && navigator.clipboard.writeText(props.context),\r\n            icon: iconcopy,\r\n            text: \"Sao chép\"\r\n        },\r\n        {\r\n            onClick: null,\r\n            icon: icontrash,\r\n            text: \"Xóa\"\r\n        },\r\n    ];\r\n\r\n    const redirectToDetailUser = () =>{\r\n        history.push(\"/personal/detail/\" + props.id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"guestchat-container\">\r\n            <CircleAvatarScreen\r\n            width=\"30px\"\r\n            height=\"30px\"\r\n            src={ props.user.avatar }\r\n            alt={ props.user.name }\r\n            class=\"guestchat-left\"\r\n            isOnline={ false }\r\n            onClick={ redirectToDetailUser }\r\n            ></CircleAvatarScreen>\r\n            <div className=\"guestchat-right\">\r\n                <p className=\"app-mainfont\">\r\n                    { props.user.name }\r\n                </p>\r\n                <div className=\"guestchat-maincontext\">\r\n                    { props.children }\r\n                    <MainPopupScreen context={ <DetailPopupScreen listEles={ listEles }></DetailPopupScreen> }> \r\n                        <div className=\"guestchat-icon-horizontal3dots\">\r\n                            <IconImageScreen src={ iconhorizontal3dots } alt=\"horizontal 3 dots\" class={\"\"}></IconImageScreen>\r\n                        </div>\r\n                    </MainPopupScreen>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        responseMess: state.responseMess,\r\n    }\r\n}\r\n  \r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        setResponseMess: (name:string , context: string , kindOfMess: number) => dispatch(setResponseMess(name , context , kindOfMess)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestChatScreen)","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\TextChat\\Views\\TextChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\Main\\Views\\NavbarScreen.tsx",["204","205","206","207"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Message.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ResponseMess.reducer.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\CurrentChat\\Views\\CurrentChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Body\\Views\\BodyCreateGroupScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Header\\Views\\HeaderCreateGroupScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\DataNotFound\\Views\\DataNotFoundScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\NoChat\\Views\\NoChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\Navbar\\IconPanel\\Views\\IconPanelScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\App.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx",["208"],"import React, { useState } from 'react';\r\nimport './BodyScreen.css';\r\nimport NavbarScreen from './../../../features/Navbar/Main/Views/NavbarScreen'\r\nimport UserChatListScreen from '../../../features/UserChatList/Main/Views/UserChatListScreen';\r\nimport ChatDetailScreen from '../../../features/ChatDetail/Main/Views/ChatDetailScreen';\r\nimport {\r\n  BrowserRouter as Router\r\n} from \"react-router-dom\";\r\nimport { useWindowSize } from '../../../libraries/Hooks/useWindowSize';\r\nimport { ENUM_KIND_OF_ICONPANEL } from '../../../libraries/Constants/KindOfIconPanel';\r\n\r\nfunction BodyScreen(props : any) {\r\n  const [activedIcon , setActivedIcon] = useState(ENUM_KIND_OF_ICONPANEL.MESSAGES);\r\n  const { hasNavbar } = props;\r\n  const [width, height] = useWindowSize();\r\n\r\n  const eleHeader: any = document.querySelector('.header-container');\r\n  const heightHeader = eleHeader ? eleHeader.offsetHeight : 50\r\n  const styleInline = {\r\n    height: height- heightHeader\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"body-container\" style = { styleInline }>\r\n        <div className={ hasNavbar ? \"body-left\" : \"body-left body-left--hide\"}>\r\n          <NavbarScreen activedIcon={ activedIcon } setActivedIcon={ setActivedIcon }></NavbarScreen>\r\n        </div>\r\n        <div className={ hasNavbar ? \"body-right--hasnavbar body-right\" : \"body-right\"}>\r\n          <div className=\"body-right-information\">\r\n            <UserChatListScreen></UserChatListScreen>\r\n          </div>\r\n\r\n          <ChatDetailScreen hasChat={ true }></ChatDetailScreen>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default BodyScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Main\\Views\\UserChatListScreen.tsx",["209","210"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\ConversationList.action.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["211"],"import React from \"react\";\r\nimport \"./UserChatScreen.css\";\r\nimport CircleAvatarScreen from \"../../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen\";\r\nimport { IConversationState } from \"../../../../../redux/Reducers/ConversationList.reducer\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CustomBadgeScreen from \"../../../../../libraries/Features/CustomBadge/Views/CustomBadgeScreen\";\r\nimport { useWindowSize } from \"../../../../../libraries/Hooks/useWindowSize\";\r\n\r\n// const iconuseronline = require('./Icons/iconuseronline.svg').default;\r\nconst iconunread = require(\"./Icons/iconunread.svg\").default;\r\n\r\nfunction UserChatScreen(props: IConversationState) {\r\n  const history = useHistory();\r\n  const [width, height] = useWindowSize();\r\n\r\n  const redirectToChatDetail = () => {\r\n    let kind = \"personal\";\r\n    if (props.isGroup) {\r\n      kind = \"group\";\r\n    }\r\n    history.push(`/${kind}/${props.id}`);\r\n\r\n    props.setIsActive(props.isGroup, props.id);\r\n  };\r\n\r\n  const renderUserImage = () => {\r\n    if (width < 768) {\r\n      return (\r\n        <CircleAvatarScreen\r\n          class=\"\"\r\n          width=\"40px\"\r\n          height=\"40px\"\r\n          src={props.avatar}\r\n          alt=\"avatar\"\r\n          isOnline={props.isOnline}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <CircleAvatarScreen\r\n          class=\"\"\r\n          width=\"48px\"\r\n          height=\"48px\"\r\n          src={props.avatar}\r\n          alt=\"avatar\"\r\n          isOnline={props.isOnline}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        props.isActive\r\n          ? \"userchat-container userchat-container-active\"\r\n          : \"userchat-container\"\r\n      }\r\n      onClick={redirectToChatDetail}\r\n    >\r\n      <div className=\"userchat-image\">\r\n        {/* <CircleAvatarScreen \r\n          class=\"\"\r\n          width=\"48px\"\r\n          height=\"48px\"\r\n          src={ props.avatar }\r\n          alt=\"avatar\"\r\n          isOnline={ props.isOnline }\r\n        ></CircleAvatarScreen> */}\r\n        {renderUserImage()}\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span\r\n            className={\r\n              props.hasReadLastMess\r\n                ? \"userchat-username app-mainfont\"\r\n                : \"userchat-username app-mainfont userchat-unreadcontext\"\r\n            }\r\n          >\r\n            {props.name}\r\n          </span>\r\n          {props.isGroup && (\r\n            <CustomBadgeScreen\r\n              text=\"Nhóm\"\r\n              class=\"userchat-groupchat\"\r\n            ></CustomBadgeScreen>\r\n          )}\r\n          <span className=\"userchat-timeoflastmess app-mainfont\">\r\n            {props.timeToReadLastMess}\r\n          </span>\r\n        </div>\r\n        {props.hasReadLastMess ? (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess\">{props.lastMess}</h3>\r\n          </div>\r\n        ) : (\r\n          <div className=\"userchat-context-bottom\">\r\n            <h3 className=\"userchat-contextoflastmess userchat-unreadcontext\">\r\n              {props.lastMess}\r\n            </h3>\r\n            <img src={iconunread} className=\"userchat-icon-unread\" alt=\"\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserChatScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\NavDetail\\UserChatList\\Header\\Views\\HeaderScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\User.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfIconPanel.ts",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":13,"column":8,"nodeType":"218","messageId":"219","endLine":13,"endColumn":26},{"ruleId":"216","severity":1,"message":"220","line":17,"column":20,"nodeType":"218","messageId":"219","endLine":17,"endColumn":29},{"ruleId":"216","severity":1,"message":"221","line":22,"column":12,"nodeType":"218","messageId":"219","endLine":22,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":36,"column":10,"nodeType":"224","endLine":36,"endColumn":19,"suggestions":"225"},{"ruleId":"212","replacedBy":"226"},{"ruleId":"214","replacedBy":"227"},{"ruleId":"222","severity":1,"message":"228","line":14,"column":71,"nodeType":"218","endLine":14,"endColumn":78},{"ruleId":"212","replacedBy":"229"},{"ruleId":"214","replacedBy":"230"},{"ruleId":"216","severity":1,"message":"231","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":30},{"ruleId":"232","severity":1,"message":"233","line":10,"column":20,"nodeType":"234","endLine":10,"endColumn":65},{"ruleId":"216","severity":1,"message":"235","line":11,"column":22,"nodeType":"218","messageId":"219","endLine":11,"endColumn":31},{"ruleId":"216","severity":1,"message":"236","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"216","severity":1,"message":"237","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":19},{"ruleId":"216","severity":1,"message":"238","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":26},{"ruleId":"216","severity":1,"message":"239","line":11,"column":7,"nodeType":"218","messageId":"219","endLine":11,"endColumn":20},{"ruleId":"216","severity":1,"message":"240","line":15,"column":10,"nodeType":"218","messageId":"219","endLine":15,"endColumn":15},{"ruleId":"216","severity":1,"message":"241","line":80,"column":10,"nodeType":"218","messageId":"219","endLine":80,"endColumn":15},{"ruleId":"222","severity":1,"message":"242","line":92,"column":5,"nodeType":"224","endLine":92,"endColumn":7,"suggestions":"243"},{"ruleId":"216","severity":1,"message":"244","line":14,"column":17,"nodeType":"218","messageId":"219","endLine":14,"endColumn":23},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"@typescript-eslint/no-unused-vars","'DataNotFoundScreen' is defined but never used.","Identifier","unusedVar","'setUserid' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.messageList'. Either include it or remove the dependency array.","ArrayExpression",["247"],["245"],["246"],"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.",["245"],["246"],"'ENUM_KIND_OF_MESSAGE' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useParams' is defined but never used.","'useState' is defined but never used.","'ModalScreen' is defined but never used.","'ToggleSwitchScreen' is defined but never used.","'iconbrownnoti' is assigned a value but never used.","'width' is assigned a value but never used.","'query' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props' and 'setUserChatIsAcTiveByPath'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["248"],"'height' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [pageNum, props.messageList]",{"range":"253","text":"254"},"Update the dependencies array to be: [props, setUserChatIsAcTiveByPath]",{"range":"255","text":"256"},[1903,1912],"[pageNum, props.messageList]",[3751,3753],"[props, setUserChatIsAcTiveByPath]"]