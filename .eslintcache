[{"D:\\Coding\\Work\\ver7\\WebChat_iHCM\\src\\features\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"1","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\store.ts":"2","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx":"3","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\Main\\Views\\UserChatListScreen.tsx":"4","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Conversion.database.ts":"5","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts":"6","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\NoChat\\Views\\NoChatScreen.tsx":"7","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"8","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx":"9","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx":"10","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Body\\Views\\BodyConversationDetailScreen.tsx":"11","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts":"12","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Header\\Views\\HeaderCreateGroupScreen.tsx":"13","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Header\\Views\\HeaderConversationDetailScreen.tsx":"14","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx":"15","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx":"16","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx":"17","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\Main\\Views\\ChatInputScreen.tsx":"18","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Body\\Views\\BodyCreateGroupScreen.tsx":"19","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx":"20","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Conversation\\Views\\GroupConversationScreen.tsx":"21","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts":"22","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\NoUserChatFound\\Views\\NoUserChatFound.tsx":"23","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\Header\\Views\\HeaderScreen.tsx":"24","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx":"25","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Modal\\Views\\ModalScreen.tsx":"26","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Detail\\Views\\GroupDetailScreen.tsx":"27","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx":"28","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx":"29","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx":"30","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\SystemChat\\Views\\SystemChatScreen.tsx":"31","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx":"32","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx":"33","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx":"34","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts":"35","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfConversation.ts":"36","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx":"37","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ConversationList.reducer.ts":"38","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx":"39","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\ResponseMess.type.ts":"40","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts":"41","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\User.database.ts":"42","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\CurrentChat\\Views\\CurrentChatScreen.tsx":"43"},{"size":3722,"mtime":1610072506325,"results":"44","hashOfConfig":"45"},{"size":238,"mtime":1610072974205,"results":"46","hashOfConfig":"47"},{"size":1081,"mtime":1610072974194,"results":"48","hashOfConfig":"47"},{"size":6155,"mtime":1610074712873,"results":"49","hashOfConfig":"47"},{"size":369,"mtime":1610072974206,"results":"50","hashOfConfig":"47"},{"size":53,"mtime":1610072974205,"results":"51","hashOfConfig":"47"},{"size":410,"mtime":1610072974175,"results":"52","hashOfConfig":"47"},{"size":3416,"mtime":1610094089256,"results":"53","hashOfConfig":"47"},{"size":21010,"mtime":1610072974176,"results":"54","hashOfConfig":"47"},{"size":10632,"mtime":1610100394027,"results":"55","hashOfConfig":"47"},{"size":90400,"mtime":1610072974167,"results":"56","hashOfConfig":"47"},{"size":258,"mtime":1610072974159,"results":"57","hashOfConfig":"47"},{"size":3142,"mtime":1610078041332,"results":"58","hashOfConfig":"47"},{"size":2064,"mtime":1610096124064,"results":"59","hashOfConfig":"47"},{"size":1100,"mtime":1610073863081,"results":"60","hashOfConfig":"47"},{"size":1495,"mtime":1610073883537,"results":"61","hashOfConfig":"47"},{"size":1262,"mtime":1610074613130,"results":"62","hashOfConfig":"47"},{"size":5498,"mtime":1610074644605,"results":"63","hashOfConfig":"47"},{"size":9371,"mtime":1610080234312,"results":"64","hashOfConfig":"47"},{"size":1304,"mtime":1610091744131,"results":"65","hashOfConfig":"47"},{"size":12535,"mtime":1610072974170,"results":"66","hashOfConfig":"47"},{"size":441,"mtime":1610094168719,"results":"67","hashOfConfig":"47"},{"size":434,"mtime":1610072974181,"results":"68","hashOfConfig":"47"},{"size":773,"mtime":1610072974179,"results":"69","hashOfConfig":"47"},{"size":3361,"mtime":1610072974162,"results":"70","hashOfConfig":"47"},{"size":1096,"mtime":1610072974193,"results":"71","hashOfConfig":"47"},{"size":13364,"mtime":1610072974173,"results":"72","hashOfConfig":"47"},{"size":6006,"mtime":1610348846911,"results":"73","hashOfConfig":"47"},{"size":212,"mtime":1610072974192,"results":"74","hashOfConfig":"47"},{"size":687,"mtime":1610072974159,"results":"75","hashOfConfig":"47"},{"size":1047,"mtime":1610103543638,"results":"76","hashOfConfig":"47"},{"size":281,"mtime":1610072974182,"results":"77","hashOfConfig":"47"},{"size":1080,"mtime":1610072974184,"results":"78","hashOfConfig":"47"},{"size":1002,"mtime":1610072974195,"results":"79","hashOfConfig":"47"},{"size":790,"mtime":1610072974206,"results":"80","hashOfConfig":"47"},{"size":91,"mtime":1610072974183,"results":"81","hashOfConfig":"47"},{"size":335,"mtime":1610072974195,"results":"82","hashOfConfig":"47"},{"size":5644,"mtime":1610072974204,"results":"83","hashOfConfig":"47"},{"size":390,"mtime":1610072974189,"results":"84","hashOfConfig":"47"},{"size":165,"mtime":1610072974205,"results":"85","hashOfConfig":"47"},{"size":229,"mtime":1610072974202,"results":"86","hashOfConfig":"47"},{"size":2246,"mtime":1610072974207,"results":"87","hashOfConfig":"47"},{"size":582,"mtime":1610072974161,"results":"88","hashOfConfig":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1yjzjyy",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"1un77o0",{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"93"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"93"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\Work\\ver7\\WebChat_iHCM\\src\\features\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["183","184"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\store.ts",[],["185","186"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\DetailPopup\\Views\\DetailPopupScreen.tsx",["187"],"import React from 'react';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../Constants/KindOfMessage';\r\nimport IconImageScreen from '../../../IconImage/Views/IconImageScreen';\r\nimport './DetailPopupScreen.css';\r\n\r\nfunction DetailPopupScreen(props : any){\r\n    const { listEles , eleHeader } = props;\r\n    const showDetailPopup = () =>{\r\n        return listEles.map((ele:any , index:number) =>{\r\n            return (\r\n                <li onClick={ ele.onClick }>\r\n                    <IconImageScreen src={ ele.icon } alt=\"replay\" class={\"\"}></IconImageScreen>\r\n                    <span className=\"app-mainfont\">\r\n                        { ele.text }\r\n                    </span>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"detailpopup-container\">\r\n            {\r\n                eleHeader && eleHeader\r\n            }\r\n            <ul className=\"detailpopup-detail\">\r\n                {\r\n                    showDetailPopup()\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DetailPopupScreen;","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\Main\\Views\\UserChatListScreen.tsx",["188","189"],"\r\nimport React, { useState } from 'react';\r\nimport HeaderScreen from '../../Header/Views/HeaderScreen';\r\nimport UserChatScreen from '../../UserChat/Views/UserChatScreen';\r\nimport './UserChatListScreen.css';\r\nimport { IUserChat } from '../../UserChat/Models/UserChatModel';\r\nimport NoUserChatFound from '../../NoUserChatFound/Views/NoUserChatFound';\r\nimport CustomInputScreen from '../../../../libraries/Features/CustomInput/Views/CustomInputScreen';\r\nimport { connect } from 'react-redux';\r\nimport { getConversationList } from '../../../../redux/Actions/ConversationList.action';\r\nimport { useEffect } from 'react';\r\nimport { IConversationState } from '../../../../redux/Reducers/ConversationList.reducer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ENUM_KIND_OF_CONVERSATION } from '../../../../libraries/Constants/KindOfConversation';\r\n\r\n\r\nconst iconsearch = require(\"../../../../libraries/Icons/iconsearch.svg\")\r\n  .default;\r\n\r\nconst styleCustomInput = {\r\n  backgroundImage: `url('${iconsearch}')`,\r\n  backgroundPosition: \"3% 50%\",\r\n  padding: \"12px 20px 12px 40px\",\r\n  borderRadius: \"0.7rem\",\r\n  fontSize: \"1rem\",\r\n};\r\n\r\nfunction UserChatListScreen(props: any) {\r\n  // const { conversationList } = props;\r\n\r\n  const conversationList = [\r\n    {\r\n      avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n      hasReadLastMess: false,\r\n      id: 1,\r\n      isActive: false,\r\n      isGroup: false,\r\n      isOnline: true,\r\n      lastMess:\r\n        \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n      name: \"Trung Đức\",\r\n      setIsActive: null,\r\n      timeToReadLastMess: \"09:09\",\r\n    },\r\n    {\r\n      avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n      hasReadLastMess: false,\r\n      id: 2,\r\n      isActive: false,\r\n      isGroup: true,\r\n      isOnline: false,\r\n      lastMess:\r\n        \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n      name: \"Hội người yêu chim\",\r\n      setIsActive: null,\r\n      timeToReadLastMess: \"09:09\",\r\n    },\r\n    {\r\n      avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n      hasReadLastMess: true,\r\n      id: 3,\r\n      isActive: false,\r\n      isGroup: true,\r\n      isOnline: true,\r\n      lastMess:\r\n        \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n      name: \"Hội người yêu chim\",\r\n      setIsActive: null,\r\n      timeToReadLastMess: \"09:09\",\r\n    },\r\n    {\r\n      avatar: \"https://www.w3schools.com/w3images/avatar2.png\",\r\n      hasReadLastMess: true,\r\n      id: 4,\r\n      isActive: false,\r\n      isGroup: false,\r\n      isOnline: true,\r\n      lastMess:\r\n        \"Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.\",\r\n      name: \"Trung Đức\",\r\n      setIsActive: null,\r\n      timeToReadLastMess: \"09:09\",\r\n    },\r\n  ];\r\n\r\n  const history = useHistory();\r\n\r\n  const [activedUserChat , setActivedUserChat] = useState({\r\n    isGroup:false,\r\n    id: -1\r\n  })\r\n\r\n  useEffect(() => {\r\n    const id = 3;\r\n    props.getConversationList(id);\r\n    const currentPathName = history.location.pathname;\r\n    const arrPath = currentPathName.split(\"/\");\r\n    if(arrPath[1] === ENUM_KIND_OF_CONVERSATION.GROUP){\r\n      setUserChatIsAcTive(true , parseInt(arrPath[2]))\r\n    } else if(arrPath[1] === ENUM_KIND_OF_CONVERSATION.PERSONAL){\r\n      setUserChatIsAcTive(false , parseInt(arrPath[2]))\r\n    }\r\n  }, [])\r\n\r\n  const setUserChatIsAcTive = (isGroup:boolean , id:number) =>{\r\n    setActivedUserChat({\r\n      isGroup,\r\n      id,\r\n    });\r\n  };\r\n\r\n  const ShowConversationList = (conversationList: IConversationState[]) => {\r\n    if (conversationList.length === 0) {\r\n      return <NoUserChatFound></NoUserChatFound>;\r\n    }\r\n    return conversationList.map(\r\n      (conversationState: IConversationState, idx: number) => (\r\n        <UserChatScreen\r\n          key={idx}\r\n          id={conversationState.id}\r\n          hasReadLastMess={conversationState.hasReadLastMess}\r\n          isGroup={conversationState.isGroup}\r\n          isOnline={conversationState.isGroup}\r\n          name={conversationState.name}\r\n          lastMess={conversationState.lastMess}\r\n          timeToReadLastMess={conversationState.timeToReadLastMess}\r\n          avatar={conversationState.avatar}\r\n          isActive={\r\n            conversationState.isGroup === activedUserChat.isGroup &&\r\n            conversationState.id === activedUserChat.id\r\n          }\r\n          setIsActive={setUserChatIsAcTive}\r\n        ></UserChatScreen>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"userchatlist-container\">\r\n      <div className=\"userchatlist-top\">\r\n        <HeaderScreen></HeaderScreen>\r\n        <CustomInputScreen\r\n          style={styleCustomInput}\r\n          class=\"searchinput-container\"\r\n          placeHolder=\"Tìm kiếm cuộc trò chuyện\"\r\n          isMultiline={false}\r\n          isTextArea={ true }\r\n        ></CustomInputScreen>\r\n      </div>\r\n      <div className=\"userchatlist-bottom\">\r\n        {ShowConversationList(conversationList)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    conversationList: state.conversationList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getConversationList: (id: number) => dispatch(getConversationList(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserChatListScreen);\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Conversion.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\CurrentUser.type.ts",[],["190","191"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\NoChat\\Views\\NoChatScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["192","193","194","195"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Personal\\Conversation\\Views\\PersonalConversationScreen.tsx",["196","197","198"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\AddMember\\Views\\AddMemberScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Body\\Views\\BodyConversationDetailScreen.tsx",["199","200","201"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Models\\ImageChat.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Header\\Views\\HeaderCreateGroupScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\ConversationDetail\\Header\\Views\\HeaderConversationDetailScreen.tsx",["202","203"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Main\\Views\\ConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\Header\\Views\\HeaderConversationScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CustomInput\\Views\\CustomInputScreen.tsx",["204"],"import React, { ChangeEvent } from 'react';\r\nimport { useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { ICustomInput } from '../Models/CustomInput';\r\nimport './CustomInputScreen.css';\r\n\r\nfunction CustomInputScreen(props : ICustomInput) {\r\n  const [value , setValue] = useState(\"\");\r\n  const textAreaRef = useRef<HTMLTextAreaElement >(null);\r\n\r\n  const changeValue = (e: any) =>{\r\n    const value = e.target.value;\r\n    setValue(value);\r\n    if(props.isMultiline){\r\n      const lineNum = e.target.value.split(\"\\n\").length;\r\n      if(textAreaRef.current){\r\n        if(lineNum > 1){\r\n          textAreaRef.current.rows = 3;\r\n          props.setIsMultiline(true);\r\n        } else{\r\n          textAreaRef.current.rows = 1;\r\n          props.setIsMultiline(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className={ \"custominput-container \" + props.class}>\r\n      {\r\n        props.isTextArea ?\r\n        <input type=\"text\" multiple={true} placeholder={ props.placeHolder } style={ props.style }/> :\r\n        <textarea placeholder={ props.placeHolder } style={ props.style } ref={textAreaRef} rows={1} onChange={ (e: ChangeEvent<Element>) => changeValue(e)}></textarea>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomInputScreen;\r\n","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatInput\\Main\\Views\\ChatInputScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Create\\Body\\Views\\BodyCreateGroupScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\containers\\Body\\Views\\BodyScreen.tsx",["205"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Conversation\\Views\\GroupConversationScreen.tsx",["206","207","208"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Hooks\\useWindowSize.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\NoUserChatFound\\Views\\NoUserChatFound.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\UserChatList\\Header\\Views\\HeaderScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\GuestChat\\Views\\GuestChatScreen.tsx",["209"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Modal\\Views\\ModalScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Group\\Detail\\Views\\GroupDetailScreen.tsx",["210"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\Main\\Views\\ChatListScreen.tsx",["211","212","213","214"],"import React, { useCallback, useEffect , useRef, useState } from 'react';\r\nimport CurrentChatScreen from '../../CurrentChat/Views/CurrentChatScreen';\r\nimport GuestChatScreen from '../../GuestChat/Views/GuestChatScreen';\r\nimport { findUserById, IMessage, IUser } from '../Models/ChatList';\r\nimport LoadingSpinnerScreen from '../../../../../../libraries/Features/LoadingSpinner/Views/LoadingSpinnerScreen';\r\nimport './ChatListScreen.css';\r\nimport { ENUM_KIND_OF_MESSAGE } from '../../../../../../libraries/Constants/KindOfMessage';\r\nimport FileChatScreen from '../../ContextChat/FileChat/Views/FileChatScreen';\r\nimport TextChatScreen from '../../ContextChat/TextChat/Views/TextChatScreen';\r\nimport ImageChatScreen from '../../ContextChat/ImageChat/Views/ImageChatScreen';\r\nimport SystemChatScreen from '../../ContextChat/SystemChat/Views/SystemChatScreen';\r\n\r\nfunction ChatListScreen(props: any){\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [userid, setUserid] = useState<number>(1);\r\n    \r\n    const chatlistRef = useRef<HTMLInputElement>(null);\r\n    const [pageNum , setPageNum] = useState(1);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [messageList, setMessageList] = useState<IMessage[]>([]);\r\n    const [hasMore, setHasMore] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        const messageListz = props.messageList.slice(- pageNum * 3);\r\n        setMessageList(messageListz)\r\n        setHasMore(messageListz.length > 0)\r\n        setLoading(false)\r\n        setIsLoading(false)\r\n      }, [pageNum])\r\n\r\n    const observer = useRef<any>();\r\n    const lastMessageRef = useCallback(node => {\r\n        if (loading) return\r\n        if (observer.current) observer.current.disconnect()\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting && hasMore) {\r\n                setPageNum(prevPageNumber => prevPageNumber + 1)\r\n            }\r\n        })\r\n        if (node) observer.current.observe(node)\r\n    }, [loading, hasMore]);\r\n\r\n    useEffect(() =>{\r\n        if(chatlistRef.current  && pageNum <= 2){\r\n            chatlistRef.current.scrollTop = chatlistRef.current.scrollHeight;\r\n        }\r\n    })\r\n    \r\n    const showAllMessages = useCallback(() :any =>{\r\n        if(observer.current){\r\n            observer.current.scrollTop = observer.current.scrollHeight;\r\n        }\r\n        return messageList.map((message: IMessage, index: number) =>{\r\n            const userTemp: IUser = findUserById(props.userList,message.userid);\r\n            const isCurrent: boolean = userTemp.id === userid;\r\n\r\n            let eleChildren: JSX.Element = <div></div>;\r\n\r\n            switch (message.kindOfMess) {\r\n                case ENUM_KIND_OF_MESSAGE.TEXT:\r\n                    eleChildren = (\r\n                        <TextChatScreen\r\n                        isCurrent={ isCurrent }\r\n                        context={ message.context }\r\n                        datetime={ message.datetime }\r\n                        ></TextChatScreen>\r\n                    )\r\n\r\n                    break;\r\n                case ENUM_KIND_OF_MESSAGE.FILE:\r\n                    eleChildren = (\r\n                        <FileChatScreen\r\n                        isFile={ true }\r\n                        isCurrent={ isCurrent }\r\n                        context={ message.context }\r\n                        datetime={ message.datetime }\r\n                        ></FileChatScreen>\r\n                    )\r\n\r\n                    break;\r\n                case ENUM_KIND_OF_MESSAGE.IMAGE:\r\n                    eleChildren = (\r\n                        <ImageChatScreen\r\n                        isCurrent={ isCurrent }\r\n                        context={ message.context }\r\n                        datetime={ message.datetime }\r\n                        ></ImageChatScreen>\r\n                    )\r\n\r\n                    break;\r\n                case ENUM_KIND_OF_MESSAGE.LINK:\r\n                    eleChildren = (\r\n                        <FileChatScreen\r\n                        isFile={ false }\r\n                        isCurrent={ isCurrent }\r\n                        context={ message.context }\r\n                        datetime={ message.datetime }\r\n                        ></FileChatScreen>\r\n                    )\r\n                    break;\r\n            \r\n                default:\r\n                    return <div></div>;\r\n            }\r\n\r\n            if(isCurrent){\r\n                return <CurrentChatScreen key={ index } ref={ index === 0 ? lastMessageRef : null }>\r\n                    { eleChildren }\r\n                </CurrentChatScreen>\r\n\r\n            } else{\r\n                return <div ref={ index === 0 ? lastMessageRef : null } key={ index }>\r\n                    <GuestChatScreen\r\n                        id={ props.id }\r\n                        kindOfMess={ message.kindOfMess }\r\n                        user={ userTemp } \r\n                        context={ message.context }\r\n                    >\r\n                        { eleChildren }\r\n                    </GuestChatScreen>\r\n                </div>\r\n\r\n            }\r\n        })\r\n    },[messageList , userid]);\r\n\r\n    return (\r\n        <div className=\"chatlist-container\" ref={ chatlistRef }>\r\n            {\r\n                isLoading ? (\r\n                    <div className=\"chatlist-loader\">\r\n                        <LoadingSpinnerScreen></LoadingSpinnerScreen>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        {\r\n                            loading && <h3>Loading ...</h3>\r\n                        }\r\n                        {\r\n                            showAllMessages()\r\n                        }\r\n                        <SystemChatScreen></SystemChatScreen>\r\n                    </div>\r\n\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatListScreen;","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\LoadingSpinner\\Views\\LoadingSpinnerScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\ImageChat\\Views\\ImageChatScreen.tsx",["215"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\ContextChat\\SystemChat\\Views\\SystemChatScreen.tsx",["216"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\index.tsx",[],["217","218"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\CircleAvatar\\Views\\CircleAvatarScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\Popup\\MainPopup\\Views\\MainPopupScreen.tsx",["219"],"import React, { useRef , useEffect } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport './MainPopupScreen.css';\r\n\r\nconst MainPopupScreen = (props: any) =>{ \r\n  const ref = useRef<any>(null);\r\n\r\n  // const closeTooltip = () => ref.current.close();\r\n\r\n  function ClosePopupWhenScroll(ref: any) {\r\n    useEffect(() => {\r\n      document.addEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      return () => {\r\n        document.removeEventListener(\"wheel\", () =>ref.current && ref.current.close());\r\n      };\r\n    }, [ref]);\r\n  }\r\n\r\n  ClosePopupWhenScroll(ref);\r\n  \r\n  return (\r\n    <Popup\r\n      ref={ref}\r\n      trigger={\r\n        props.children\r\n      }\r\n      position={['bottom left', 'bottom center']}\r\n      closeOnDocumentClick={true}\r\n      arrow={false}\r\n      repositionOnResize={true}\r\n    >\r\n        <div className=\"mainpopup-container\">\r\n            {\r\n            props.context\r\n            }\r\n        </div>\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default MainPopupScreen;","D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\Group.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Constants\\KindOfConversation.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\ToggleSwitch\\Views\\ToggleSwitchScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Reducers\\ConversationList.reducer.ts",["220","221","222","223","224","225"],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\libraries\\Features\\IconImage\\Views\\IconImageScreen.tsx",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Types\\ResponseMess.type.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\redux\\Actions\\CurrentUser.action.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\sampledatabase\\User.database.ts",[],"D:\\Coding\\Work\\ver8\\WebChat_iHCM\\src\\features\\ChatDetail\\Conversation\\ChatList\\CurrentChat\\Views\\CurrentChatScreen.tsx",[],{"ruleId":"226","severity":1,"message":"227","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":19},{"ruleId":"226","severity":1,"message":"230","line":15,"column":17,"nodeType":"228","messageId":"229","endLine":15,"endColumn":23},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","replacedBy":"234"},{"ruleId":"226","severity":1,"message":"235","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":30},{"ruleId":"226","severity":1,"message":"227","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":19},{"ruleId":"236","severity":1,"message":"237","line":103,"column":6,"nodeType":"238","endLine":103,"endColumn":8,"suggestions":"239"},{"ruleId":"231","replacedBy":"240"},{"ruleId":"233","replacedBy":"241"},{"ruleId":"226","severity":1,"message":"242","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":25},{"ruleId":"226","severity":1,"message":"227","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":19},{"ruleId":"226","severity":1,"message":"243","line":8,"column":10,"nodeType":"228","messageId":"229","endLine":8,"endColumn":25},{"ruleId":"226","severity":1,"message":"230","line":16,"column":17,"nodeType":"228","messageId":"229","endLine":16,"endColumn":23},{"ruleId":"226","severity":1,"message":"244","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":26},{"ruleId":"226","severity":1,"message":"242","line":1,"column":28,"nodeType":"228","messageId":"229","endLine":1,"endColumn":36},{"ruleId":"226","severity":1,"message":"245","line":17,"column":7,"nodeType":"228","messageId":"229","endLine":17,"endColumn":35},{"ruleId":"226","severity":1,"message":"242","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":25},{"ruleId":"226","severity":1,"message":"235","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":30},{"ruleId":"226","severity":1,"message":"246","line":4,"column":8,"nodeType":"228","messageId":"229","endLine":4,"endColumn":22},{"ruleId":"226","severity":1,"message":"247","line":4,"column":8,"nodeType":"228","messageId":"229","endLine":4,"endColumn":23},{"ruleId":"226","severity":1,"message":"248","line":12,"column":9,"nodeType":"228","messageId":"229","endLine":12,"endColumn":11},{"ruleId":"226","severity":1,"message":"249","line":8,"column":10,"nodeType":"228","messageId":"229","endLine":8,"endColumn":15},{"ruleId":"226","severity":1,"message":"250","line":13,"column":10,"nodeType":"228","messageId":"229","endLine":13,"endColumn":15},{"ruleId":"226","severity":1,"message":"244","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":26},{"ruleId":"226","severity":1,"message":"242","line":1,"column":28,"nodeType":"228","messageId":"229","endLine":1,"endColumn":36},{"ruleId":"226","severity":1,"message":"251","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":23},{"ruleId":"226","severity":1,"message":"252","line":11,"column":22,"nodeType":"228","messageId":"229","endLine":11,"endColumn":31},{"ruleId":"226","severity":1,"message":"252","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":19},{"ruleId":"226","severity":1,"message":"253","line":15,"column":20,"nodeType":"228","messageId":"229","endLine":15,"endColumn":29},{"ruleId":"226","severity":1,"message":"254","line":20,"column":12,"nodeType":"228","messageId":"229","endLine":20,"endColumn":17},{"ruleId":"236","severity":1,"message":"255","line":34,"column":10,"nodeType":"238","endLine":34,"endColumn":19,"suggestions":"256"},{"ruleId":"236","severity":1,"message":"257","line":130,"column":7,"nodeType":"238","endLine":130,"endColumn":29,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":10,"column":20,"nodeType":"261","endLine":10,"endColumn":65},{"ruleId":"226","severity":1,"message":"262","line":2,"column":8,"nodeType":"228","messageId":"229","endLine":2,"endColumn":26},{"ruleId":"231","replacedBy":"263"},{"ruleId":"233","replacedBy":"264"},{"ruleId":"236","severity":1,"message":"265","line":14,"column":71,"nodeType":"228","endLine":14,"endColumn":78},{"ruleId":"266","severity":1,"message":"267","line":30,"column":98,"nodeType":"268","messageId":"269","endLine":30,"endColumn":100},{"ruleId":"266","severity":1,"message":"270","line":37,"column":83,"nodeType":"268","messageId":"269","endLine":37,"endColumn":85},{"ruleId":"266","severity":1,"message":"271","line":47,"column":78,"nodeType":"268","messageId":"269","endLine":47,"endColumn":80},{"ruleId":"266","severity":1,"message":"267","line":71,"column":132,"nodeType":"268","messageId":"269","endLine":71,"endColumn":134},{"ruleId":"266","severity":1,"message":"270","line":78,"column":103,"nodeType":"268","messageId":"269","endLine":78,"endColumn":105},{"ruleId":"266","severity":1,"message":"271","line":91,"column":85,"nodeType":"268","messageId":"269","endLine":91,"endColumn":87},"@typescript-eslint/no-unused-vars","'IUserChat' is defined but never used.","Identifier","unusedVar","'height' is assigned a value but never used.","no-native-reassign",["272"],"no-negated-in-lhs",["273"],"'ENUM_KIND_OF_MESSAGE' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history.location.pathname' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["274"],["272"],["273"],"'useState' is defined but never used.","'useLayoutEffect' is defined but never used.","'useEffect' is defined but never used.","'coversionList' is assigned a value but never used.","'FileChatScreen' is defined but never used.","'IconCirclePanel' is defined but never used.","'id' is assigned a value but never used.","'value' is assigned a value but never used.","'width' is assigned a value but never used.","'IConversation' is defined but never used.","'useParams' is defined but never used.","'setUserid' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.messageList'. Either include it or remove the dependency array.",["275"],"React Hook useCallback has missing dependencies: 'lastMessageRef', 'props.id', and 'props.userList'. Either include them or remove the dependency array.",["276"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'CircleAvatarScreen' is defined but never used.",["272"],["273"],"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.some() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},"Update the dependencies array to be: [history.location.pathname, props]",{"range":"283","text":"284"},"Update the dependencies array to be: [pageNum, props.messageList]",{"range":"285","text":"286"},"Update the dependencies array to be: [lastMessageRef, messageList, props.id, props.userList, userid]",{"range":"287","text":"288"},[4126,4128],"[history.location.pathname, props]",[1673,1682],"[pageNum, props.messageList]",[5247,5269],"[lastMessageRef, messageList, props.id, props.userList, userid]"]