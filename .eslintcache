[{"E:\\ReactJS\\Webchat_iHCM\\src\\features\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx":"1"},{"size":2518,"mtime":1609293738629,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1algdk3","E:\\ReactJS\\Webchat_iHCM\\src\\features\\UserChatList\\UserChat\\Views\\UserChatScreen.tsx",["7"],"import React, { useState } from 'react';\r\nimport './UserChatScreen.css';\r\nimport { IUserChat } from '../Models/UserChatModel';\r\nimport CircleAvatarScreen from '../../../../libraries/Features/CircleAvatar/Views/CircleAvatarScreen';\r\nimport { IConversationState } from '../../../../redux/Reducers/ConversationList.reducer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomBadgeScreen from '../../../../libraries/Features/CustomBadge/Views/CustomBadgeScreen';\r\n\r\n// const iconuseronline = require('./Icons/iconuseronline.svg').default;\r\nconst iconunread = require('./Icons/iconunread.svg').default;\r\n\r\nfunction UserChatScreen(props : IConversationState) {\r\n  const history = useHistory();\r\n\r\n  const redirectToChatDetail = () =>{\r\n    let kind = \"personal\";\r\n    if(props.isGroup){\r\n      kind = \"group\";\r\n    }\r\n    history.push(`/${kind}/${props.id}`);\r\n\r\n    props.setIsActive(props.isGroup , props.id);\r\n  }\r\n \r\n  return (\r\n    <div className={ props.isActive ? \"userchat-container userchat-container-active\" : \"userchat-container\"} onClick={ redirectToChatDetail }>\r\n      <div className=\"userchat-image\">\r\n        <CircleAvatarScreen \r\n          class=\"\"\r\n          width=\"48px\"\r\n          height=\"48px\"\r\n          src={ props.avatar }\r\n          alt=\"avatar\"\r\n          isOnline={ props.isOnline }\r\n        ></CircleAvatarScreen>\r\n      </div>\r\n      <div className=\"userchat-context\">\r\n        <div className=\"userchat-context-top\">\r\n          <span className={ props.hasReadLastMess ? \"userchat-username app-mainfont\" : \"userchat-username app-mainfont userchat-unreadcontext\" }>\r\n            { props.name }\r\n          </span>\r\n          { props.isGroup && (<CustomBadgeScreen text=\"NhÃ³m\" class=\"userchat-groupchat\"></CustomBadgeScreen>) }    \r\n          <span className=\"userchat-timeoflastmess app-mainfont\">\r\n            { props.timeToReadLastMess }\r\n          </span>\r\n        {/* </div>\r\n        {\r\n          props.hasReadLastMess ? \r\n          (\r\n            <div className=\"userchat-context-bottom\"> \r\n              <h3 className=\"userchat-contextoflastmess\">{ props.lastMess }</h3> \r\n            </div>\r\n          ) : \r\n          (\r\n            <div className=\"userchat-context-bottom\"> \r\n            <h3 className=\"userchat-contextoflastmess userchat-unreadcontext\">{ props.lastMess }</h3> \r\n            <img src={ iconunread } className=\"userchat-icon-unread\" alt=\"\" />\r\n          </div> */}\r\n          )\r\n        }\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserChatScreen;\r\n",{"ruleId":null,"fatal":true,"severity":2,"message":"8","line":60,"column":8},"Parsing error: Unexpected token. Did you mean `{'}'}` or `&rbrace;`?"]